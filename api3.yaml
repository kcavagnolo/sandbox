# spec version
openapi: 3.0.0

# server URL definitions
servers:
  - url: https://public-api.mapanything.io/mare/v1
    description: Production server
  - url: http://api.devmare.com/v1
    description: Development server
  - url: http://api.devmare.com/sandbox
    description: Sandbox server

# general info about the API
info:
  version: 1.0.0
  title: MapAnything API

  termsOfService: https://mapanything.com/trust/terms-of-service
  contact:
    name: MapAnything API Support
    email: support@mapanything.com
    url: https://mapanything.force.com/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  #x-logo:
  #  url: #https://mapanything.com/application/themes/mapanything/img/ma-logo-blue.svg
  #  altText: MapAnything Logo

# relative URLs to external documentation
externalDocs:
  url: https://developer.mapanything.com/
  description: Visit the MapAnything Developer Portal

# tag management
tags:
  - name: Health

  - name: Distance Matrix

  - name: Vehicle Routing

  #- name: Repair
  #  description:
  #    $ref: /Users/kcavagnolo/mare/api-docs/dev-portal/frontmatter/repair.md

# tag groups
x-tagGroups:
  - name: Optimization Service
    tags:
      - Distance Matrix
      - Vehicle Routing
      - Route Repair
  - name: Tools
    tags:
      - Tokens
      - Health
      - Analytics

# paths in the API
paths:

  ###################
  # admin endpoints #
  ###################

  # service health
  /health:
    get:
      summary: Service health check
      description: >
        Some general information on the API and state of the service
      operationId: getHealth
      responses:
        200:
          description: Service health
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200Response'
        default:
          description: >
            Unexpected error(s)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Health

  #############################
  # distance matrix endpoints #
  #############################

  # matrix job submission endpoint
  /matrix:
    post:
      summary: Submit distance matrix request
      description: >
        Takes a set of locations and returns estimates for the travel distance
        and time between each.
      operationId: postMatrix
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatrixRequest'
      x-code-samples:
        - lang: cURL
          source: |
            curl --request POST \
              --url https://public-api.mapanything.io/mare/v1/matrix \
              --header 'accept: application/json' \
              --header 'cache-control: no-cache' \
              --header 'content-type: application/json' \
              --header 'x-api-key: $MAPANYTHING_API_KEY' \
              --data @/path/to/routing/data/matrix_job_payload.json
        - lang: JavaScript
          source: |
            var data = matrix_job_payload;
            var xhr = new XMLHttpRequest();
            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });
            xhr.open("POST", "https://public-api.mapanything.io/mare/v1/matrix");
            xhr.setRequestHeader("accept", "application/json");
            xhr.setRequestHeader("cache-control", "no-cache");
            xhr.setRequestHeader("content-type", "application/json");
            xhr.setRequestHeader("x-api-key", "$MAPANYTHING_API_KEY");
            xhr.send(data);
        - lang: 'Python'
          source: |
            import requests
            url = "https://public-api.mapanything.io/mare/v1/matrix"
            payload = matrix_job_payload
            headers = {
                'accept': "application/json",
                'content-type': "application/json"
                }
            response = requests.request("POST", url, data=payload, headers=headers)
            print(response.text)
      responses:
        200:
          description: >
            Request succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatrixResponse'
        202:
          description: >
            Request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202Response'
          links:
            GetJobByJobId:
              $ref: '#/components/links/GetJobByJobId'
        default:
          description: >
            Unexpected error(s)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Distance Matrix

  # matrix job request endpoint
  /matrix/{job_id}:
    parameters:
      - name: job_id
        in: path
        description: >
          The `job_id` parameter is supplied in the response to the original submitted request.
        required: true
        deprecated: false
        schema:
          type: string
          example: 973e416dcf6fd7fa326f2b01a51c9462
    get:
      summary: Access distance matrix response
      description: >
        Returns the status of a previously submitted, and accepted, request to the Distance Matric endpoint based on the `job_id` supplied.
      operationId: getMatrixById
      responses:
        201:
          description: >
            Request succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/201Response'
        202:
          description: >
            Request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202Response'
          links:
            GetJobByJobId:
              $ref: '#/components/links/GetJobByJobId'
        default:
          description: >
            Unexpected error(s)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Distance Matrix

  #####################
  # routing endpoints #
  #####################

  # routing job submission endpoint
  # TODO: add code samples
  /routing:
    post:
      summary: Submit vehicle routing request
      description: >
        Takes a set of locations, orders, vehicles, constraints, and items and returns optimized routes.
      operationId: postRouting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutingRequest'
      #x-code-samples:
      responses:
        200:
          description: >
            Request succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutingResponse'
        202:
          description: >
            Request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202Response'
          links:
            GetJobByJobId:
              $ref: '#/components/links/GetJobByJobId'
        default:
          description: >
            Unexpected error(s)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Vehicle Routing

  # routing job request endpoint
  /routing/{jobId}:
    parameters:
      - name: job_id
        in: path
        description: >
          The `job_id` parameter is supplied in the response to the original submitted request.
        required: true
        deprecated: false
        schema:
          type: string
          example: 973e416dcf6fd7fa326f2b01a51c9462
    get:
      summary: Access vehicle routing response
      description: >
        Returns the status of a previously submitted, and accepted, request to the Vehicle Routing endpoint based on the `job_id` supplied.
      operationId: getRoutingById
      responses:
        201:
          description: >
            Request succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/201Response'
        202:
          description: >
            Request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202Response'
          links:
            GetJobByJobId:
              $ref: '#/components/links/GetJobByJobId'
        default:
          description: >
            Unexpected error(s)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Vehicle Routing

  ####################
  # repair endpoints #
  ####################
  #
  # # routing repair job submission endpoint
  # /repair:
  #   post:
  #     summary: Accepts a Repair Job and Returns Job Status (May include payload?)
  #     operationId: postRepair
  #     responses:
  #       201:
  #         description: Repair Async Job submitted successfully.
  #     tags:
  #       - Repair
  #     requestBody:
  #       $ref: '#/components/requestBodies/Repair_Job_JSON'
  #
  # # routing repair job request endpoint
  # /repair/{jobId}:
  #   parameters:
  #     - name: jobId
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #   delete:
  #     summary: Abort or Cancel a Job
  #     operationId: deleteRepairById
  #     responses:
  #       204:
  #         description: Job successfully deleted.
  #       404:
  #         description: Job not found.
  #     tags:
  #       - Repair
  #   get:
  #     summary: Returns the status of the job
  #     operationId: getRepairById
  #     responses:
  #       404:
  #         description: Job not found.
  #     tags:
  #       - Repair

# components
components:

  # schemas
  schemas:

    ####################
    # regular vehicles #
    ####################

    # vehicle template
    Vehicle:
      type: object
      description: >
        Describes a vehicle and its attributes in order to estimate travel times and distances.
      discriminator:
        propertyName: type
      required:
        - type
      properties:
        type:
          type: string
          description: >
            The type of `vehicle` being used for transport.
          example: car

    # car template
    Car:
      allOf:
        - $ref: '#/components/schemas/Vehicle'

    # bicycle template
    Bicycle:
      allOf:
        - $ref: '#/components/schemas/Vehicle'

    # pedestrian template
    Pedestrian:
      allOf:
        - $ref: '#/components/schemas/Vehicle'

    # truck template
    Truck:
      allOf:
        - $ref: '#/components/schemas/Vehicle'
        - type: object
          description: >
            Describes the truck `vehicle` type and the attributes needed for estimating travel times and distances.
          required:
            - height
            - length
            - width
            - weight
            - hazmat
            - num_axles            
          properties:
            hazmat:
              type: boolean
              description: >
                Describes if the truck is subject to hazmat restrictions in the jurisdictions in which it will operate. Users should consult local regulations to determine this value. `hazmat` is used to restrict routing to allowable roads.
              enum:
                - true
                - false
              default: false
              example: true
            height:
              type: number
              format: float
              description: >
                Vehicle height in meters.
              default: 0.0
              example: 4.27
            length:
              type: number
              format: float
              description: >
                Vehicle length in meters.
              default: 0.0
              example: 14.63
            width:
              type: number
              format: float
              description: >
                Vehicle width in meters.
              default: 0.0
              example: 2.44
            weight:
              type: number
              format: float
              description: >
                Vehicle weight in kilograms.
              default: 0.0
              example: 36287
            num_axles:
              type: integer
              format: int64
              description: >
                Describes the number of axles on the truck. Users should consult local regulations to calculate this value. `num_axles` is used to restrict routing to allowable roads.
              default: 0.0
              example: 5

    ###################
    # routing objects #
    ###################

    # appointment template
    Appointment:
      type: object
      description: >
        A generalized object describing appointments to satisfy in the routing
        problem.
      required:
        - appointment_start
        - appointment_end
      properties:
        appointment_start:
          type: string
          format: date-time
          description: >
            Local start time given in ISO8601 time format. Used in conjunction with `appointment_end` parameter.
          example: 2018-10-02T12:30:00-04:00
        appointment_end:
          type: string
          format: date-time
          description: >
            Local end time given in ISO8601 time format. Used in conjunction with `appointment_start` parameter.
          example: 2018-10-02T14:30:00-04:00

    # break template
    Break:
      type: object
      description: >
        An object describing a break.
      required:
        - abs_break_end_time
        - abs_break_start_time
        - break_end_time
        - break_start_time
      properties:
        abs_break_start_time:
          type: integer
          format: int64
          description: >
            Break absolute start local time given in Unix time format. Used in conjunction with `abs_break_end_time` parameter.
          example: 1538403439
        abs_break_end_time:
          type: integer
          format: int64
          description: >
            Break absolute end local time given in Unix time format. Used in conjunction with `abs_break_start_time` parameter.
          example: 1538403439
        break_start_time:
          type: string
          format: date-time
          description: >
            Break start local time given in ISO8601 time format. Used in
            conjunction with `break_end_time` parameter.
          example: 2018-10-02T09:00:00-04:00
        break_end_time:
          type: string
          format: date-time
          description: >
            Break end local time given in ISO8601 time format. Used in
            conjunction with `break_start_time` parameter.
          example: 2018-10-02T09:00:00-04:00
      example: {
          "abs_break_end_time": 1503594000,
          "abs_break_start_time": 1503590400,
          "break_end_time": "2017-08-24T13:00:00-04:00",
          "break_start_time": "2017-08-24T12:00:00-04:00"
        }
    
    # order template
    Order:
      type: object
      description: >
        Describes the orders and their attributes for creating routes.
      required:
        - order_id
        - location_id
      properties:
        order_id:
          type: string
          description: Unique identifier for the order
          example: OrderABC123
        location_id:
          type: string
          description: Identifier for the location of this order
          example: DistributionCenter-A1
        pickup_item_quantities:
          type: array
          minItems: 1
          # TODO: is there a maximum number of items in array?
          maxItems: 10
          items:
            type: object
            required:
              - item_type
              - quantity
            properties:
              item_type:
                type: string
                description: >
                  An item type defined in the top-level `item` object
                example: lumber
              quantity:
                type: number
                format: double
                description: >
                  The quantity of the `item_type` to pickup.
                example: 10.5
          # TODO: specify > 0 minimum
          #minimum: > 0
          uniqueItems: true
          description: >
              Array of items that specify an `item_type` and `quantity`. The
              `item_type` must be contained in the upper level `items` object. If
              this keyword is not provided, MARE will not account for any pickups.
          example: [
            {
              "item_type": "lumber",
              "quantity": 10.5
            }
          ]
        delivery_item_quantities:
          type: array
          items:
            type: object
            required:
              - item_type
              - quantity
            properties:
              item_type:
                type: string
                description: >
                  An item type defined in the top-level `item` object
                example: lumber
              quantity:
                type: number
                format: double
                description: >
                  The quantity of the `item_type` to pickup.
                example: 10.5
          # TODO: specify > 0 minimum
          #minimum: > 0
          uniqueItems: true
          description: >
              Array of items that specify an `item_type` and `quantity`. The
              `item_type` must be contained in the upper level `items` object. If
              this keyword is not provided, MARE will not account for any deliveries.
          example: [
            {
              "item_type": "bricks",
              "quantity": 200
            }
          ]
        duration:
          type: integer
          format: int64
          description: >
            The duration in seconds of the time required to service this order.
            If this keyword is not provided, MARE assumes the order is
            unrealistically satisfied instantaneously.
          default: 0
          example: 3600
        appointments:
          type: array
          items:
            $ref: '#/components/schemas/Appointment'
          minItems: 1
          uniqueItems: false
          description: >
            Rigidly fixed start and end times for an appointment. Note that when an
            appointment is provided, the `duration` parameter of the order
            (if given) is ignored when MARE schedules the appointment(s).
          example: [
            {
              "appointment_start": "2018-10-02T12:30:00-04:00",
              "appointment_end": "2018-10-02T14:30:00-04:00"
            }
          ]
        time_windows:
          type: object
          description: >
            Flexible range of service start times for an order. MARE may decide
            that a vehicle will arrive early and idle before starting service at this
            order depending on the `Time_Window` constraint and penalty. **NOTE: if the
            `Time_Window` constraint is not provided, then these `time_windows` are ignored
            because MARE does not know the relative importance of meeting `time_windows`.**
          required:
            - start_time_window
            - end_time_window
          properties:
            start_time_window:
              type: string
              description: >
                The start time, given as an ISO8601 time format. Used in conjunction with `end_time_window` parameter.
              example: 2018-10-01T14:00:00-04:00
            end_time_window:
              type: string
              description: >
                The end time, given as an ISO8601 time format. Used in conjunction with `start_time_window` parameter.
              example: 2018-10-01T16:30:00-04:00
        attributes:
          type: array
          items:
            type: string
          minItems: 1
          uniqueItems: true
          description: >
            List of arbitrary attributes associated with the order to create an
            affinity between vehicles and orders. These strings must exactly
            match with the vehicle `attribute` parameters and are enforced via
            the `match_attributes` constraint.
          example: ["only likes Jim",
                    "needs anesthesia car",
                    "Spanish only"]
        min_visits:
          type: integer
          format: int64
          description: >
            Minimum number of visits this order must receive over the planning
            period. Enforced via the `Visit_Range` constraint.
          minimum: 1
          default: 1
          example: 3
        max_visits:
          type: integer
          format: int64
          description: >
            Maximum number of visits this order must receive over the planning
            period. Enforced via the `Visit_Range` constraint.
          minimum: 1
          default: 1
          example: 10
        min_gap:
          type: integer
          format: int64
          description: >
            Minimum number of days between visits. Enforced via the `Visit_Gap`
            constraint.
          example: 11
        urgency:
          type: integer
          format: int64
          minimum: 1
          maximum: 99
          description: >
            When coupled with the Urgency constraint, a penalty is incurred when
            the order is not visited early enough in the planning period.
          example: 42
        priority:
          type: integer
          format: int64
          description: >
            Some positive integer representing the importance of this order
            relative to others. To be enforced, must also specify `Order_Priority` constraint. If some orders have priorities and others do not, then orders without a priority will default to 1. To encourage an order to be visited, set a priority greater than 1 and use the `Priority`
            constraint.
          default: 1
          example: 5

    # routed order template
    # TODO: I don't see `route_id` in the responses on dev. Deprecated?
    # TODO: the times look to be arrays in dev
    # TODO: visit gaps are arrays in dev
    # TODO: there are no departures in the orders object in dev
    # TODO: how to have internal v external params, ala `order_index`
    RoutedOrder:
      type: object
      description: >
        An object that accounts for the status of an order provided in a routing problem.
      required:
        - order_id
        - route_id
        - location_id
        - max_visits
        - min_visits
        - num_visits
        - priority
        - visit_gap
        - visit_gap_days
        - arrival_time
        - departure_time
        - abs_arrival_time
        - abs_departure_time
        - position_in_route
        - service_time
        - status
        - order_index
      properties:
        order_id:
          type: string
          description: >
            String exactly matching the `order_id` provided in the request.
          example: order-abc123
        route_id:
          type: array
          items:
            type: string
          minItems: 1
          uniqueItems: false
          description: >
            An array of the unique IDs of the routes on which this order is visited. Parameter will be `NULL` if the order was not successfully added to a route.
          example: [
            "route-65redfgy6",
            "route-23epj29d2"
          ]
        location_id:
          type: string
          description: >
            A unique identifier for the location.
          example: Depot-A123
        min_visits:
          type: integer
          format: int64
          description: >
            Desired minimum number of visits this order must receive over the planning period. Enforced via the `Visit_Range` constraint.
          example: 3
        max_visits:
          type: integer
          format: int64
          description: >
            Desired maximum number of visits this order must receive over the planning period. Enforced via the `Visit_Range` constraint.
          example: 10
        num_visits:
          type: integer
          format: int64
          description: >
            The actual total number of visits this order received during the planning period. Parameter will be `NULL` if the order was not successfully added to a route.
          example: 2
        priority:
          type: integer
          format: int64
          description: >
            Some positive integer representing the importance of this order
            relative to others. To be enforced, must also specify `Order_Priority` constraint.
          example: 5
        visit_gap:
          type: array
          items:
            type: integer
            format: int64
          minItems: 1
          uniqueItems: false
          description: >
            Each integer in the array describes the actual time in seconds between visits. Parameter will be `NULL` if the order was not successfully added to a route.
          example: [
            4363,
            7471,
            378
          ]
        visit_gap_days:
          type: array
          items:
            type: integer
            format: int64
          minItems: 1
          uniqueItems: true
          description: >
            Each integer in the array describes the actual time in days between visits. Parameter will be `NULL` if the order was not successfully added to a route.
          example: [
            2.4,
            3.2,
            0.05
          ]
        arrival_time:
          type: array
          items:
            type: string
            format: date-time
          description: >
            Array of local times of arrival at the stop when this order was visited, given in ISO8601 time format. Parameter will be `NULL` if the order was not successfully added to a route.
          minItems: 1
          uniqueItems: true
          example: [
            2017-08-24T08:05:00-04:00,
            2017-08-26T08:05:00-04:00
          ]
        departure_time:
          type: array
          items:
            type: string
            format: date-time
          description: >
            Array of local times of departure at the stop when this order was visited, given in ISO8601 time format. Parameter will be `NULL` if the order was not successfully added to a route.
          minItems: 1
          uniqueItems: true
          example: [
            2017-08-24T08:05:00-04:00,
            2017-08-26T08:05:00-04:00
          ]
        abs_arrival_time:
          type: array
          items:
            type: integer
            format: int64
          description: >
            Array of arrival times at the stop where this order was visited, given in Unix time format. Parameter will be `NULL` if the order was not successfully added to a route.
          minItems: 1
          uniqueItems: true
          example: [
            1503589082,
            1503634402
          ]
        abs_departure_time:
          type: array
          items:
            type: integer
            format: int64
          description: >
            Array of departure times at the stop where this order was visited, given in Unix time format. Parameter will be `NULL` if the order was not successfully added to a route.
          minItems: 1
          uniqueItems: true
          example: [
            1503589682,
            1503635002
          ]
        position_in_route:
          type: array
          items:
            type: integer
            format: int64
          description: >
            An array of the relative positions in the routes on which this order is visited. Parameter will be `NULL` if the order was not successfully added to a route.
          example: [
            10,
            5
          ]
        service_time:
          type: array
          items:
            type: number
            format: double
          description: >
            An array of the time in seconds spent servicing the order on the routes. Parameter will be `NULL` if the order was not successfully added to a route.
          example: [
            5372.0,
            2345.0
          ]
        status:
          type: array
          items:
            type: string
          description: >
            An array of order status on the routes. Parameter will be `routed` if the order was successfully added to a route, and will be `unrouted` otherwise.
          example: [
            "routed",
            "routed"
          ]
        order_index:
          type: array
          items:
            type: integer
            format: int64
          description: >
            **INTERNAL USE** An array of the index of the order on the routes. Parameter will be `NULL` if the order was not successfully added to a route.
          example: [
            2,
            5
          ]
    
    # item template
    Item:
      type: object
      description: >
        A generalized object describing a unit to be picked-up or delivered in
        the routing problem.
      required:
        - item_type
      properties:
        item_type:
          type: string
          description: >
            String that identifies the type of item. For example, "lumber" or
            "frozen meat". Refer to the example to get started quickly.
          example: lumber
        volume:
          type: number
          format: double
          description: Volume of item in cubic centimeters
          example: 1000.2
        weight:
          type: number
          format: double
          description: Weight of item in kilograms
          example: 10.2
        attributes:
          type: array
          items:
            type: string
          minItems: 1
          uniqueItems: true
          description: >
            List of attributes that may be used to describe an affinity between
            items and orders or vehicles.
          example: ["pine", "treated", "20ft"]
    
    # item-qty template
    ItemQty:
      type: object
      description: >
        Describes a generalized (item_type, value) pair that a vehicle can
        carry. Each key must be an item_type given in the `items` object.
      required:
        - item_type
        - quantity
      properties:
        item_type:
          type: string
          description: >
            Type of item; must be an `item_type` given in the `items` object.
          example: lumber
        quantity:
          type: integer
          format: int64
          description: >
            A value representing the _number_ of items this vehicle can carry.
            Recall, properties of the `item_type` are specified in the `items`
            object, but not the quantity, which is specified at the `vehicle`
            level.
          default: 1
          minimum: 1
          example: 5

    # itinerary item template
    ItineraryItem:
      type: object
      description: >
        A flexible object that describes an action taken on a route (i.e. driving, servicing order, break, soft break).
      required:
        - action
        - time_from
        - time_to
      properties:
        action:
          type: string
          description: >
            An action taken on a route (i.e. driving, servicing order, break, soft break)
          example: driving to arrival with no break
        time_from:
          type: string
          format: date-time
          description: >
            Start local time of the action given in ISO8601 time format.
          example: 2017-08-24T08:05:00-04:00
        time_to:
          type: string
          format: date-time
          description: >
            End local time of the action given in ISO8601 time format.
          example: 2017-08-24T08:05:00-04:00
    
    # location template
    Location:
      type: object
      description: >
        A point of interest represented as a `latitude` and `longitude` in the
        WGS84 reference coordinate system.
      required:
        - latitude
        - longitude
        - location_id
      properties:
        latitude:
          type: number
          format: float
          description: >
            Location's latitude value in the WGS84 reference coordinate system.
          example: 33.8730743
        longitude:
          type: number
          format: float
          description: >
            Location's longitude value in the WGS84 reference coordinate system.
          example: -84.3951042
        location_id:
          type: string
          description: >
            A unique identifier for the location.
          example: Depot-A123
        location_class:
          type: array
          items:
            type: integer
            format: int64
          minItems: 1
          uniqueItems: true
          # TODO: add location class tutorial
          description: >
            Please see our [Location Class Tutorial](https://developer.mapanything.com/tutorials) for an example. A set of classes to associate with a location in order to limit matrix results to only `sources` and `destionations` where at least one entry in the `location_class` arrays overlap. For example, a `source` might be a plumber or an electrician, and a `destination` would be a job that requires a plumber or electrician. The distance matrix only includes travel distances and times if the intersection of the `source`'s `location_class` array and `destination`'s `location_class` array is non-empty. This behavior can be further modified by using the `force_containment` parameter.
          example: [0, 2, 3, 6]

    # route template
    # TODO: start and end location id have been removed in this version
    Route:
      type: object
      description: >
        Each route object corresponds to a vehicle shift, and contains time spent traveling, driving directions, polylines, arrival times, and so on.
      required:
        - abs_route_end_time
        - abs_route_start_time
        - breaks
        - directions
        - items_delivered
        - items_picked_up
        - itinerary
        - max_segment_distance
        - max_segment_time
        - max_volume_in_vehicle
        - max_weight_in_vehicle
        - num_breaks
        - num_soft_breaks
        - polylines
        - route_end_time
        - route_id
        - route_start_time
        - route_traffic_time
        - route_travel_time
        - route_working_time
        - slack_time
        - soft_breaks
        - total_break_time
        - total_idle_time
        - total_soft_break_time
      properties:
        route_id:
          type: string
          description: >
            Unique identifier within the response for a route.
          example: Vehicle:uuid-sent-in-request:abc123
        route_start_time:
          type: string
          format: date-time
          description: >
            Start local time given in ISO8601 time format. Used in
            conjunction with `route_end_time` parameter.
          example: 2018-10-02T09:00:00-04:00
        route_end_time:
          type: string
          format: date-time
          description: >
            End local time given in ISO8601 time format. Used in
            conjunction with `route_start_time` parameter.
          example: 2018-10-02T15:40:40-04:00
        abs_route_start_time:
          type: integer
          format: int64
          description: >
            Start local time given in Unix time format. Used in
            conjunction with `abs_route_end_time` parameter.
          example: 1538403439
        abs_route_end_time:
          type: integer
          format: int64
          description: >
            End local time given in Unix time format. Used in
            conjunction with `abs_route_start_time` parameter.
          example: 1538403439
        breaks:
          type: array
          items:
            $ref: '#/components/schemas/Break'
          minItems: 1
          uniqueItems: true
          description: >
            Each entry describes a break (a period during which the vehicle is not moving and not on shift) with its start and end times represented in absolute and local times.
          example: [
            {
              "abs_break_end_time": 1503594000,
              "abs_break_start_time": 1503590400,
              "break_end_time": "2017-08-24T13:00:00-04:00",
              "break_start_time": "2017-08-24T12:00:00-04:00"
            }
          ]
        directions:
          type: array
          items:
            type: string
          minItems: 1
          uniqueItems: true
          description: >
            TODO: fill this in
          example:
            TODO: fill this in
        items_delivered:
          type: array
          items:
            $ref: '#/components/schemas/Item'
          minItems: 1
          uniqueItems: true
          description: >
            Each entry describes the units delivered on the route.
          example: [
            {
              "item_type": "bricks",
              "volume": 1250,
              "weight": 5,
              "attributes": [
                "red"
              ]
            }
          ]
        items_picked_up:
          type: array
          items:
            $ref: '#/components/schemas/Item'
          minItems: 1
          uniqueItems: true
          description: >
            Each entry describes the units picked-up on the route.
          example: [
            {
              "item_type": "bricks",
              "volume": 1250,
              "weight": 5,
              "attributes": [
                "red"
              ]
            }
          ]
        itinerary:
          type: array
          items:
            $ref: '#/components/schemas/ItineraryItem'
          minItems: 1
          uniqueItems: true
          description: >
            Each object in the array describes an action taken on the route (i.e. driving, servicing order, break, soft break) with a start and end time for each action.
          example: [
            {
              "action": "driving to arrival w./ no break",
              "time_from": "2017-08-24T08:05:00-04:00",
              "time_to": "2017-08-24T08:05:00-04:00"
            },
            {
              "action": "service order 691033-start",
              "time_from": "2017-08-24T08:05:00-04:00",
              "time_to": "2017-08-24T08:10:00-04:00"
            },
            {
              "action": "driving to arrival w./ no break",
              "time_from": "2017-08-24T08:10:00-04:00",
              "time_to": "2017-08-24T08:36:43-04:00"
            }
          ]
        max_segment_distance:
          type: number
          format: double
          description: >
            Number of meters in the longest segment on this route.
          example: 64411.5
        max_segment_time:
          type: number
          format: double
          description: >
            Number of seconds in the longest segment on this route.
          example: 3341.8
        max_volume_in_vehicle:
          type: number
          format: double
          description: >
            The maximum volume in cubic meters of the items in the vehicle over the entire route.
          example: 450000.0
        max_weight_in_vehicle:
          type: number
          format: double
          description: >
            The maximum weight in kilograms of the items in the vehicle over the entire route.
          example: 30000.0
        num_breaks:
          type: integer
          format: int64
          description: >
            Number of breaks on the route.
          example: 2
        num_soft_breaks:
          type: integer
          format: int64
          description: >
            Number of soft breaks on the route.
          example: 1
        polylines:
          type: array
          items:
            type: string
          minItems: 1
          uniqueItems: true
          description: >
            TODO: fill this in
          example:
            TODO: fill this in
        route_traffic_time:
          type: number
          format: double
          description: >
            Estimate of the total time in seconds spent in traffic. This is computed by taking the difference of actual travel time and the lowest travel time amount on any of the route segments.
          example: 609.2
        route_travel_time:
          type: number
          format: double
          description: >
            Total travel time in seconds for the route.
          example: 2441.3
        route_working_time:
          type: number
          format: double
          description: >
            Total travel time in seconds plus additional time spent servicing and idling during the route. Should always be greater than or equal to `route_travel_time`.
          example: 24041.3
        slack_time:
          type: number
          format: double
          description: >
            Total number of seconds of unused time in the route.
          example: 154.0
        soft_breaks:
          type: array
          items:
            $ref: '#/components/schemas/Break'
          minItems: 1
          uniqueItems: true
          description: >
            Each entry describes a soft break (a period during which a vehicle can be moving and not on shift) with its start and end times represented in absolute and local times.
          example: [
            {
              "abs_break_end_time": 1503594000,
              "abs_break_start_time": 1503590400,
              "break_end_time": "2017-08-24T13:00:00-04:00",
              "break_start_time": "2017-08-24T12:00:00-04:00"
            }
          ]
        total_break_time:
          type: number
          format: double
          description: >
            Total number of seconds spent in a break on the route.
          example: 600.0
        total_idle_time:
          type: number
          format: double
          description: >
            Total number of seconds spent in idle time waiting for a break or waiting to meet a time window.
          example: 1200.0
        total_soft_break_time:
          type: number
          format: double
          description: >
            Total number of seconds spent in a soft break on the route.
          example: 60.0
    
    # shift template
    Shift:
      type: object
      description: >
        A generalized object describing a shift to be applied to a vehicle used
        in the routing problem.
      required:
        - shift_id
        - shift_start
        - shift_end
        - start_location_id
        - end_location_id
      properties:
        shift_id:
          type: string
          description: Unique identifier for the shift
          example: Tuesday Polishing or Painting
        shift_start:
          type: string
          format: date-time
          description: >
            Start local time given as an ISO8601 time format. Used in
            conjunction with `shift_end` parameter.
          example: 2018-10-02T12:30:00-04:00
        shift_end:
          type: string
          format: date-time
          description: >
            End local time given as an ISO8601 time format. Used in conjunction
            with `shift_start` parameter.
          example: 2018-10-02T12:30:00-04:00
        start_location_id:
          type: string
          description: >
            Unique identifier for the starting location of the vehicle; must be
            identical to one of a location in the `locations` keyword.
          example: location-a
        end_location_id:
          type: string
          description: >
            Unique identifier for the ending location of the vehicle; must be
            identical to one of a location in the `locations` keyword.
          example: location-b

    # traffic window template
    TrafficWindow:
      type: object
      description: >
        A generalized object describing traffic windows.
      required:
        - traffic_window_start_times
        - traffic_window_end_times
        - traffic_window_index
      properties:
        # TODO: why is the window index buried in the object and not the key?
        traffic_window_start_times:
          type: string
          format: date-time
          # TODO: does this need to be translated to ISO time instead of HHMMSS
          description: >
            The local start times of a traffic window in 24-hour _hh:mm:ss_ format. Please see our [Traffic Windows Tutorial](https://developer.mapanything.com/tutorials) for an example. Note that if our algorithms determine that traffic is roughly equivalent in two disjoint time intervals, we use a single traffic window with multiple start and end times to represent this. The `traffic_window_start_times` parameter is used in conjunction with `traffic_window_end_times` parameter.
          example: 12:30:00
        traffic_window_end_times:
          type: string
          format: date-time
          description: >
            The local end times of a traffic window in 24-hour _hh:mm:ss_ format. Please see our [Traffic Windows Tutorial](https://developer.mapanything.com/tutorials) for an example. Note that if our algorithms determine that traffic is roughly equivalent in two disjoint time intervals, we use a single traffic window with multiple start and end times to represent this. The `traffic_window_start_times` parameter is used in conjunction with `traffic_window_end_times` parameter.
          example: 14:30:00
        traffic_window_index:
          type: integer
          format: int64
          description: >
            The index of the traffic window.
          example: 0

    ####################
    # routing vehicles #
    ####################

    # routing vehicle template
    RoutingVehicle:
      type: object
      description: >
        Describes the vehicles used in a routing problem and
        their attributes required for calculating optimal solutions.
      discriminator:
        propertyName: type
      required:
        - type
        - shifts
        - vehicle_id
      properties:
        type:
          type: string
          description: >
            The type of "vehicle" mode of transport.
        shifts:
          type: array
          items:
            $ref: '#/components/schemas/Shift'
          minItems: 1
          uniqueItems: true
          description: >
            Each entry describes the start and end location, shifts and breaks
            of the vehicle during the problem. A vehicle is allowed to be
            traveling and servicing orders only during some shift. Shifts cannot
            overlap for a given vehicle. Currently `start_location_id` and
            `end_location_id` are required, but we understand the need for
            "open" routes where either or both are not specified.
          example: [
            {
              "shift_id": "Tuesday_Polishing_Or_Painting",
              "shift_start": "2018-10-02T09:00:00-04:00",
              "shift_end": "2018-10-02T18:00:00-04:00",
              "start_location_id": "location-a",
              "end_location_id": "location-b"
            }
          ]
        vehicle_id:
          type: string
          description: Unique identifier of the vehicle.
          example: truck-abc123
        volume_capacity:
          type: number
          format: double
          description: Maximum vehicle volumetric capacity in cubic centimeters.
          example: 534422.1
        weight_capacity:
          type: number
          format: double
          description: Maximum vehicle weight capacity in kilograms
          example: 42331.2
        capacity_by_item:
          type: array
          items:
            $ref: '#/components/schemas/ItemQty'
          minItems: 1
          uniqueItems: true
          description: >
            Describes a set of (`item_type`, `quantity`) pairs that the vehicle
            can carry. Each key must be an `item_type` given in the `items`
            object. If this is not given, MARE assumes the vehicle has an
            infinite capacity on a per-item basis. Mixing different items is
            handled by `volume_capacity`, in cubic meters or `weight_capacity`
            in kg. By default, if this keyword is not given, MARE will not take
            into account any capacities by item.
        attributes:
          type: array
          items:
            type: string
          minItems: 1
          uniqueItems: true
          description: >
            List of arbitrary attributes associated with a vehicle in the
            `vehicles` object to create an affinity between vehicles and orders.
            These strings must exactly match with the order `attribute`
            parameters and are enforced via the `match_attributes` constraint.
          example: ["does not like Jim",
                    "bucket truck",
                    "Tamil only"]

    # car template
    RoutingCar:
      allOf:
        - $ref: '#/components/schemas/RoutingVehicle'

    # bicycle template
    RoutingBicycle:
      allOf:
        - $ref: '#/components/schemas/RoutingVehicle'

    # pedestrian template
    RoutingPedestrian:
      allOf:
        - $ref: '#/components/schemas/RoutingVehicle'

    # truck template
    RoutingTruck:
      allOf:
        - $ref: '#/components/schemas/RoutingVehicle'
        - type: object
          description: >
            Describes the vehicle and its attributes for estimating travel
            times. The fastest response times will be with vehicle type car.
          required:
            - hazmat
            - height
            - length
            - width
            - weight
            - num_axles
          properties:
            hazmat:
              type: boolean
              description: >
                true if this vehicle is subject to hazmat
                restrictions.
              enum:
                - true
                - false
              default: false
              example: true
            height:
              type: number
              format: float
              description: >
                Vehicle height in meters.
              example: 4.27
            length:
              type: number
              format: float
              description: >
                Vehicle length in meters.
              example: 14.63
            width:
              type: number
              format: float
              description: >
                Vehicle width in meters.
              example: 2.44
            weight:
              type: number
              format: float
              description: >
                Vehicle weight in kilograms.
              example: 36287
            num_axles:
              type: integer
              format: int64
              description: >
                Describes vehicle properties in order to
                restrict routing to allowable roads.
              example: 5

    ###############
    # constraints #
    ###############

    # TODO: individual constraint descriptions not rendering in ReDoc

    # constraint template
    Constraint:
      type: object
      discriminator:
        propertyName: constraint_type
      description: >
        A generalized object describing a constraint to be applied in the
        routing problem. Constraint options are provided in the Examples.
      required:
        - constraint_name
        - constraint_type
        - penalty_per_violation
      properties:
        constraint_name:
          type: string
          description: >
            Arbitrary, human-readable name of the constraint.
          example: Visit Sequence Constraint
        constraint_type:
          type: string
          description: >
            A type of constraint that can be applied in solving the
            routing problem.
          example: Max_Distance
        penalty_per_violation:
          type: number
          format: double
          description: >
            Numeric value that quantifies the amount of penalty assigned to each
            violation of the constraint. Values should be made specific to the
            `constraint_type` and the routing problem.
          example: 10000
        constraint_id:
          type: string
          description: >
            Unique identifier for the constraint for user reference. This could
            refer to an internal database key or some other identifier of use to
            the requestor. If unspecified, no value is used.
          example: Non-negotiable Constraint1
        violation_increment:
          type: integer
          format: int64
          description: >
            For constraints that involve a numerical threshold, an additional
            `penalty_per_violation` is assessed for every `violation_increment`
            units over the threshold. For example, if a constraint specifies
            that no route should last more than 500 minutes of total time with a
            penalty of 100, and you specify a `violation_increment` of 10, then
            a route of 523 minutes would receive a penalty of 300. 100 is for
            the initial violation, and then 2 x 100 more for exceeding the
            threshold by 23.
          example: 10
        hard_constraint:
          type: boolean
          description: >
            **WARNING! This parameter has the potential to return no results
            frequently. Use at your own risk.** If set to `true`, then the
            constraint is treated as a truly hard constraint, i.e. no
            violations with no exceptions; thus guaranteeing no solutions will
            be returned that violate it.
          enum:
            - true
            - false
          default: false
          example: true

    # first visit template
    First_Visit:
      description: >
        Ensure that order A is the first order serviced on the route.
      allOf:
      - $ref: '#/components/schemas/Constraint'
      - type: object
        required:
          - order_ids
        properties:
          order_ids:
            type: array
            items:
              type: string
            minItems: 1
            uniqueItems: true
            description: IDs of the order to be visited first in their route.
            example: ["order-abc123", "order-qrs456"]
          vehicle_id:
            type: string
            description: The order that must be visited by the provided vehicle.
            example: "vehicle-A1Z9"

    # last visit template
    Last_Visit:
      description: >
        Ensure that order A is the last order serviced on the route.
      allOf:
      - $ref: '#/components/schemas/Constraint'
      - type: object
        required:
          - vehicle_id
          - order_ids
        properties:
          vehicle_id:
            type: string
            description: Order must be visited by the provided vehicle.
            example: vehicle-A1Z9
          order_ids:
            type: array
            items:
              type: string
            minItems: 1
            uniqueItems: true
            description: IDs fo the order to be visited in their route.
            example: ["order-abc123", "order-xyz789"]

    # match attributes template
    Match_Attributes:
      description: >
        Match the attributes of an order with the attributes of a vehicle
        servicing the order.
      allOf:
        - $ref: '#/components/schemas/Constraint'

    # travel time template
    Max_Distance:
      description: >
        Ensure that the route for a vehicle does not exceed a maximum distance.
        Applies to all routes if specifics not provided.
      allOf:
      - $ref: '#/components/schemas/Constraint'
      - type: object
        required:
          - max_km
        properties:
          max_km:
            type: integer
            format: int64
            description: >
              This will penalize 1 unit if a route exceeds `max_km`. For
              example, if the `max_km` is set to 10 and the `violation_increment`
              is set to 10, then there would be a penalty of 2 for a route 30 km
              in length. If this constraint is not given, MARE will not account
              for travel distance at all.
            example: 10

    # order priority
    Order_Priority:
      description: >
        Favor visiting high priority orders.
      allOf:
        - $ref: '#/components/schemas/Constraint'

    # scheduled appointment template
    Scheduled_Appointment:
      description: >
        Ensure an order is serviced during an appointment window.
      allOf:
      - $ref: '#/components/schemas/Constraint'
      - type: object
        required:
          - order_ids
        properties:
          order_ids:
            type: array
            items:
              type: string
            minItems: 1
            uniqueItems: true
            description: >
              The orders that have scheduled appointments.
            example: ["order-abc123", "order-qrs456"]

    # time window template
    Time_Window:
      description: >
        Ensure that the arrival time at order A is between two times.
      allOf:
      - $ref: '#/components/schemas/Constraint'
      - type: object
        required:
          - order_ids
        properties:
          order_ids:
            type: array
            items:
              type: string
            minItems: 1
            uniqueItems: true
            description: >
              ID of the orders whose time window we want to respect. Applies to all
              orders if not given.
            example: ["order-abc123", "order-xyz789"]

    # travel time template
    Travel_Time:
      description: >
        Ensure that the route for a vehicle does not exceed a maximum duration.
        Applies to all routes if specifics not provided.
      allOf:
      - $ref: '#/components/schemas/Constraint'
      - type: object
        required:
          - max_travel_time_seconds
        properties:
          max_travel_time_seconds:
            type: integer
            format: int64
            description: >
              This will penalize 1 unit if a route exceeds
              `max_travel_time_seconds`. For example, if the
              `max_travel_time_seconds` is set to 3600 (one hour in seconds) and
              the `violation_increment` is set to 600 (ten minutes in seconds),
              then there would be a penalty of 2 for a route 4800 seconds
              in duration. If this constraint is not given, MARE will not account
              for travel distance at all.
            example: 3600

    # urgency template
    Urgency:
      description: >
        Try to visit some orders earlier in the planning period than others.
        Each order can have an optional `urgency` attribute which is a double
        in the range (1, 99). The higher the urgency value, the earlier MARE
        will try to visit it. So if the planning period is 10,000 seconds and
        an order has urgency 89, then we will penalize a solution that has us
        visiting this order after ((100-89)/100)*10,000 = 1100 seconds. In this
        case, the violation increment is in percentage points.
      allOf:
        - $ref: '#/components/schemas/Constraint'

    # visit gap template
    # TODO: check how OAS3.0 handles array of arrays; online example looks wrong
    Visit_Gap:
      description: Ensure the spacing of visits at an order meet requirements.
      allOf:
      - $ref: '#/components/schemas/Constraint'
      - type: object
        required:
          - order_sets
        properties:
          order_sets:
            type: array
            items:
              type: array
              items:
                type: string
            description: >
              This can be used to specify order sets, in which case the gap is
              checked between all visits occurring for any order in each set.
              Otherwise, you can specify specific orders for this constraint. If no
              orders are specified, it defaults to all orders. The time between two
              consecutive visits at an order is the difference in the arrival times
              at the orders. This constraint is evaluated in terms of the order’s
              `min_days` and `max_days` properties over entire planning period, as
              well as those within each period object in the order over that period.
              A day is converted to seconds behind the scenes.
            example: [["order1", "order2", "order5"], ["order3", "order4"]]

    # visit range template
    # TODO: check how OAS3.0 handles array of arrays
    Visit_Range:
      description: >
        Ensure an order receives a specified minimum and/or maximum number of
        visits over the planning period. You can specify order sets, in which
        case each set is checked by summing visits across all orders in that
        set. Otherwise orders are checked individually. This constraint checks
        using the min_visits and max_visits values specified in order object
        over entire planning period, as well as parameters specified in each
        period object in the order for each subset of the planning period.
      allOf:
      - $ref: '#/components/schemas/Constraint'
      - type: object
        required:
          - order_sets
        properties:
          order_sets:
            type: array
            items:
              type: array
              items:
                type: string
            description: >
              Can be used to specify order sets, in which case each set is checked
              by summing visits across all orders in that set. Otherwise orders are
              checked individually. These are checked using `min_visits` and
              `max_visits` values specified in the `order` object over the entire
              planning period, as well as parameters specified in each `period`
              object in the order for each subset of the planning period. MARE uses
              the arrival time at the order when evaluating this constraint. Users
              can also specify specific orders for this constraint – otherwise
              applied to all orders by default.
            example: [["order1", "order2", "order5"], ["order3", "order4"]]

    # visit sequence template
    Visit_Sequence:
      description: >
        Ensure that order A and order B are visited on the same day by the same
        vehicle, and that A is serviced before B.
      allOf:
      - $ref: '#/components/schemas/Constraint'
      - type: object
        required:
          - first_order_id
          - second_order_id
        properties:
          first_order_id:
            type: string
            description: Unique ID of the order to be visited first.
            example: order-abc123
          second_order_id:
            type: string
            description: Unique ID of the order to be visited second.
            example: order-xyz789
          same_route:
            type: boolean
            description: >
              If true, then the two orders must be visited on the same route. If
              false, then no violation if they are on different routes as long as
              arrival time at first order is earlier than arrival time at second
              order.
            enum:
              - true
              - false
            default: false
            example: true

    ############
    # requests #
    ############

    # matrix job template
    # TODO: think through HH:MM:SS for matrix requests; is there a better way?
    MatrixRequest:
      type: object
      description: >
        JSON object containing information about a vehicle and locations to be visited in order to calculate a distance matrix.
      required:
          - locations
          - vehicle
      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
          minItems: 1
          maxItems: 7500
          uniqueItems: true
          description: >
            **Addresses are not accepted (yet) and locations must be geocoded into latitude and longitude**. Represents locations of interest to be used for the matrix.
          example: [
            {
              "location_id": "Location-A",
              "latitude": 33.937244,
              "longitude": -84.36947
            },
            {
              "location_id": "Location-B",
              "latitude": 33.887576,
              "longitude": -84.261385
            },
            {
              "location_id": "Location-C",
              "latitude": 33.896810,
              "longitude": -84.327653
            }]
        vehicle:
          $ref: '#/components/schemas/Vehicle'
        sources:
          type: array
          items:
            type: integer
            format: int64
          minItems: 1
          maxItems: 7500 
          uniqueItems: true
          description: >
            Please see our [Sources-Destinations Tutorial](https://developer.mapanything.com/tutorials) for an example. For n locations, if the full n x n matrix is not desired, the `sources` array can be used to select the indices of the locations that are only sources and not destinations. Entries in the `sources` array must be in the set {0, 1, 2, ..., n-1} (note the zero-indexing). **`destinations` parameter must also be set otherwise will be ignored.**
          example: [0, 2]
        destinations:
          type: array
          items:
            type: integer
            format: int64
          minItems: 1
          maxItems: 10
          uniqueItems: true
          description: >
            Please see our [Sources-Destinations Tutorial](https://developer.mapanything.com/tutorials) for an example. For n locations, if the full n x n matrix is not desired, the `destinations` array can be used to select the indices of the locations that are only destinations and not sources. Entries in the `destinations` array must be in the set {0, 1, 2, ..., n-1} (note the zero-indexing). **`sources` parameter must also be set otherwise will be ignored.**
          example: [1]
        force_containment:
          type: boolean
          description: >
            Please see our [Location Class with Force Containment Tutorial](https://developer.mapanything.com/tutorials) for an example. When set to `true`, the distance matrix will only contain source-destination pairs where the set of source location classes are completely contained in the set of destination location classes. **`location_classes` and `sources` and `destinations` parameters must also be set otherwise will be ignored.**
          enum:
            - true
            - false
          example: false
        start_local_time:
          type: string
          description: >
            Please see our [Start-End Time Tutorial](https://developer.mapanything.com/tutorials) for an example. Limits distance matrix results to traffic windows that overlap the travel interval defined by `start_local_time` and `end_local_time` (24-hour _hh:mm:ss_ format). **`end_local_time` parameter must also be set otherwise will be ignored.** 
          example: 09:00:00
        end_local_time:
          type: string
          description: >
            Please see our [Start-End Time Tutorial](https://developer.mapanything.com/tutorials) for an example. Limits distance matrix results to traffic windows that overlap the travel interval defined by `start_local_time` and `end_local_time` (24-hour _hh:mm:ss_ format). **`start_local_time` parameter must also be set otherwise will be ignored.**
          example: 17:00:00
        num_neighbors:
          type: integer
          format: int64
          description: >
            Please see our [Nearest Neighbors Tutorial](https://developer.mapanything.com/tutorials) for an example. If provided, the distance matrix will only contain travel times and distances from a location to its nearest `num_neighbors` destinations.
          example: 5
        max_travel_time:
          type: number
          format: double
          description: >
            Defines the maximum travel time (in seconds) to be contained in the distance matrix. All travel times across all traffic windows that are longer than `max_travel_time` will be filtered out. Useful for applying business logic or operational constraints.
          example: 3600
        radius:
          type: integer
          format: int64
          description: >
            Our platform searches within `radius` meters of a latitude/longitude for the nearest street segment to begin the travel time and distance calculations. Adjusting this parameter can be useful in rural or remote areas where some street-level addresses may not be nearby a road of sufficient size to appear in the road network data.
          default: 1500
          example: 3000
        weekend:
          type: boolean
          description: >
            When set to `true`, calculations are for the fastest available traffic window, which corresponds to weekend/free flow traffic patterns.
          enum:
            - true
            - false
          default: false
          example: false

    # vehicle routing template
    RoutingRequest:
      type: object
      description: >
        JSON object containing information about locations, orders, vehicles,
        items, and constraints needed to build optimal routing solutions.
      required:
        - locations
        - orders
        - vehicles
        - constraints
      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
          minItems: 1
          maxItems: 7500
          uniqueItems: true
          example: [
            {
              "location_id": "location-a",
              "latitude": 33.937244,
              "longitude": -84.36947
            },
            {
              "location_id": "location-b",
              "latitude": 33.887576,
              "longitude": -84.261385
            },
            {
              "location_id": "location-c",
              "latitude": 33.896810,
              "longitude": -84.327653
            }]
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
          minItems: 1
          maxItems: 7500
          uniqueItems: true
          example: [
            {
              "location_id": "loc1",
              "order_name": "Service Washington Monument",
              "order_id": "DC-1",
              "duration": 3600,
              "priority" : 3,
              "min_visits": 2
            },
            {
              "location_id": "loc2",
              "order_name": "Service Ford's Theatre",
              "order_id": "DC-2",
              "duration": 3600,
              "priority": 2,
              "min_visits": 2
            }
          ]
        vehicles:
          type: array
          items:
            $ref: '#/components/schemas/RoutingVehicle'
          minItems: 1
          maxItems: 7500
          uniqueItems: true
          example: abc
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/Constraint'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
          minItems: 1
          uniqueItems: true
          description: >
            Each entry describes a unit to be picked-up or delivered in the routing problem.
          example: [
            {
              "item_type": "bricks",
              "volume": 1250,
              "weight": 5,
              "attributes": [
                "red"
              ]
            }
          ]

    #############
    # responses #
    #############

    # sync response template
    GenericResponse:
      description: >
        The response to all API requests will be a JSON object with the following format. A response will contain either a `data` object or an `error` object, but not both. If both `data` and `error` are mistakenly present, the `error` object takes precedence.
      type: object
      required:
        - api_version
        - method
        - request_id
        - info
      properties:
        api_version:
          description: >
            Version of the API being queried; useful for debugging or auditing.
          type: string
          example: "1.0"
        context:
          description: >
            Echo of `context` value set by client request. Useful for correlating responses with requests.
          type: string
          example: "my-request-2018-11-15T15:53:00+05:00"
        info:
          # TODO: fill in correctly
          type: object
          description: >
            Acknowledgements and copyright information for use in third party applications.
          required:
            - copyrights
            - licenses
            - acknowledgements
          properties:
            copyrights:
              type: array
              description: >
                TODO: fill this in
              items:
                type: string
              minItems: 1
              uniqueItems: true
              example: [
                "&copy; OpenStreetMap contributors",
                "&copy; MapAnything 2018"
                ]
            licenses:
              type: array
              description: >
                TODO: fill this in
              items:
                type: string
              minItems: 1
              uniqueItems: true
              example: [
                "https://map.any/765trfgh",
                "https://map.any/765r4tyu"
                ]
            acknowledgements:
              type: array
              description: >
                TODO: fill this in
              items:
                type: string
              minItems: 1
              uniqueItems: true
              example: [
                "TODO: fill this in",
                "TODO: fill this in"
              ]
        method:
          description: >
            Represents the operation performed on the request data.
          type: string
          example: "routing.post"
        request_id:
          description: >
            Unique platform supplied identifier for the request/response (regardless of whether the response is a success or an error). This is useful for correlating service logs with individual responses received by a client.
          type: string
          example: cf2e22976667b7e7b19946ca05e949ac
        
    # Success response template
    200Response:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          description: >
            TODO: fill this in
          required:
            - job_id
            - status
            - code
            - message
          properties:
            job_id:
              description: >
                Unique service supplied identifier for a launched job. This is useful for correlating server logs with individual responses received by a client.
              type: string
              example: 973e416dcf6fd7fa326f2b01a51c9462
            status:
              description: >
                Status of the request. For a 200, the status will be `"ok"` and clients should expect that the `data` property will contain a JSON object complete with results specific to the endpoint.
              type: string
              example: "ok"
            code:
              description: >
                Top-level HTTP-like code representing the state of service upon response.
              type: integer
              format: int64
              example: 200
            message:
              description: >
                Status message associated with a request and related to the HTTP-like `code`. The intent of `message` is to surface a human-readable message for debugging, auditing, or informational purposes and does not replace the contents of `error` when errors are encountered.
              type: string
              example: >
                The request has succeeded.

    # Success response template
    201Response:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          description: >
            Complete asynchronous job.
          required:
            - job_id
            - status
            - code
            - message
            - data
          properties:
            job_id:
              description: >
                Unique service supplied identifier for a launched job. This is useful for correlating server logs with individual responses received by a client.
              type: string
              example: 973e416dcf6fd7fa326f2b01a51c9462 
            status:
              description: >
                Status of the request. For a 201, the status will be `"ok"` and clients should expect that the `data` property will contain a JSON object complete with a URI to download results specific to the endpoint.
              type: string
              example: "ok"
            code:
              description: >
                Top-level HTTP-like code representing the state of service upon response.
              type: integer
              format: int64
              example: 201
            message:
              description: >
                Status message associated with a request and related to the HTTP-like `code`. The intent of `message` is to surface a human-readable message for debugging, auditing, or informational purposes and does not replace the contents of `error` when errors are encountered.
              type: string
              example: >
                The request has been fulfilled and resulted in a new resource being created.
            data:
              type: object
              description: >
                Contains the URL, filesize, and md5sum details of the hosted solution files.
              required:
                - url
                - filesize
                - md5sum
              properties:
                url:
                  type: string
                  description: >
                    When a job's `status` is `complete`, a unique URL to the JSON solution file will appear in this field.
                  example: https://map.any/3of128g7bh
                filesize:
                  type: integer
                  format: int64
                  description: >
                    The approximate size of the file in bytes. Useful for surfacing estimated download times for users or determining next best actions in the case of large files.
                  example: 1551859712
                md5sum:
                  type: string
                  description: >
                    The MD5 fingerprint of the hosted file so the client can perform a checksum after download to ensure the local file is uncorrupted after transfer.
                  example: 595f44fec1e92a71d3e9e77456ba80d1

    # Success response template
    # TODO: should the polling_url be in the body main level?
    202Response:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          description: >
            TODO: fill this in
          required:
            - job_id
            - status
            - code
            - message
            - polling
          properties:
            job_id:
              description: >
                Unique service supplied identifier for a launched job. This is useful for correlating server logs with individual responses received by a client.
              type: string
              example: 973e416dcf6fd7fa326f2b01a51c9462 
            status:
              description: >
                Status of the request. If the status is `"ok"` clients should expect that the `data` property will contain a JSON object complete with results specific to the endpoint. If the status is `"error"` clients should expect that the `error` property will contain a JSON object detailing what errors were encountered.
              type: string
              example: "accepted"
            code:
              description: >
                Top-level HTTP-like code representing the state of service upon response.
              type: integer
              format: int64
              example: 202
            message:
              description: >
                Status message associated with a request and related to the HTTP-like `code`. The intent of `message` is to surface a human-readable message for debugging, auditing, or informational purposes and does not replace the contents of `error` when errors are encountered.
              type: string
              example: >
                The request has been accepted for processing, but the processing has not been completed.
            polling_url:
              description: >
                A unique short link to poll the status of this specific job. This is a helpful link so clients do not have to rebuild the long link on their own, but can.
              type: string
              example: >
                https://map.any/jwex8-dfaf3
    
    # generic error template
    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/GenericResponse'
        - type: object
          description: >
            Indicates that an error has occurred, with details about the error. The error format supports either one or more errors returned from the service.
          required:
            - status
            - code
            - message
            - error
          properties:
            job_id:
              description: >
                If a job was started, this is the unique service supplied identifier for a launched job. May not be present in the case of errors preceding the initiation of a job.
              type: string
              example: 973e416dcf6fd7fa326f2b01a51c9462 
            status:
              description: >
                Status of the request. For an error, the status will be `"error"` and clients should expect that the `error` property will contain a JSON object detailing what errors were encountered.
              type: string
              example: "error"
            code:
              description: >
                Top-level HTTP-like code representing the state of service upon response.
              type: integer
              format: int64
              example: 503
            message:
              description: >
                Status message associated with a request and related to the HTTP-like `code`. The intent of `message` is to surface a human-readable message for debugging, auditing, or informational purposes and does not replace the contents of `error` when errors are encountered.
              type: string
              example: >
                The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.
            error:
              type: object
              description: >
                An object describing any errors encountered in processing.
              required:
                - code
                - messages
              properties:
                messages:
                  type: object
                  description: >
                    An object containing user-friendly status messages associated with system errors encountered. The messages are loosely related to the HTTP-like `code`. The intent of `messages` is to surface human-readable content for debugging, auditing, or informational purposes.
                  required:
                    - developer_msg
                    - user_msg
                  properties:
                    developer_msg:
                      description: >
                        A message intended for logging and to be read by developers for debugging or auditing. Useful for contacting technical support.
                      type: string
                      example: >
                        The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.
                    user_msg:
                      description: >
                        A message intended for surfacing to users. Useful for crafting user experience and facilitating support requests by users.
                      type: string
                      example: >
                        Sorry, there is a problem with the form of the submitted request. Please check that the input parameters are correct.
                    more_info:
                      description: >
                        A URL for a help text that might shed some more light on the error. If there is a known linkage between the error and the input, or the error is common, this field will contain helpful information such as links to tutorials, online documentation, or support forums.
                      type: string
                      example: >
                        Please consult this online tutorial for more information on submitting a routing request: http://developer.mapanything.com/tutorials/distance-matrix
                    send_report:
                      description: >
                        A URI for a report form used by the service to collect data about the error condition. This URI should be preloaded with parameters describing the request.
                      type: string
                      example: >
                        https://report.mapanything.com
                errors:
                  type: array
                  description: >
                    This field is an array of objects that contain detailed system errors encountered. This is the lowest level of technical detail and can be useful for support requests. If the service returns multiple errors, each element in the errors array represents a different error.
                  minItems: 1
                  uniqueItems: true
                  items:
                    type: object
                    properties:
                      domain:
                        description: >
                          Unique identifier for the service raising this error. This helps distinguish service-specific errors (i.e. error inserting an event in a calendar) from general protocol errors (i.e. file not found).
                        type: string
                        example: MARE
                      reason:
                        description: >
                          Unique identifier for this error. Different from the error.code property in that this is not an http response code.
                        type: string
                        example: osrmAvailablePods
                      message:
                        description: >
                          A human readable message providing more details about the error. If there is only one error, this field will match error.message.
                        type: string
                        example: >
                          In namespace osrm more than 2 minutes availablePods are not equal deployedPods.

    # matrix response
    MatrixResponse:
      allOf:
        - $ref: '#/components/schemas/200Response'
        - type: object
          description: >
            TODO: fill this in
          required:
            - data
          properties:
            data:
              type: object
              description: >
                TODO: fill this in
              required:
                - traffic_windows
                - travel_costs
                - time_zones
              properties:
                travel_costs:
                  type: object
                  description: >
                    An object containing the travel costs (time and distance) from a `source_location_id` location to a `destination_location_id`. The object keys are the top level `location_id`s passed in the request and represent the source location, and the object values are destinations with a corresponding array of distance (in meters) and one travel time per traffic window (in seconds).
                  required:
                    - source_location_id
                    - destination_location_id
                  properties:
                    Source location_id:
                      type: object
                      description: >
                        An object of arrays keyed using the top level `location_id` passed in the request. Here, the corresponding key is the source.
                      required:
                        - destination_location_id
                      properties:
                        Destination location_id:
                          type: array
                          description: >
                            An array containing the distance (in meters) and one travel time per traffic window (in seconds) from the `source_location_id` to the `destination_location_id`.
                          items:
                            type: number
                            format: float
                          minItems: 1
                          uniqueItems: true
                          example: [9138.9, 725.1, 721.2, ...]
                      example: Depot-A123
                  example: {
                    "Location-A": {
                      "Location-B": [
                        16876.5,
                        966.2,
                        1011.1
                      ],
                      "Location-C": [
                        9138.9,
                        725.1,
                        721.2
                      ]
                    }
                  }
                # TODO: can we rename locations to time_zones?
                traffic_windows:
                  type: array
                  description: >
                    An array of objects representing the individual traffic windows for which travel times and distances are computed. Refer to the [Traffic Windows Guide](TODO: create-guide) for details on current time windows, how they are determined, and additional information on handling time in routing.
                  items:
                    $ref: '#/components/schemas/TrafficWindow'
                  minItems: 1
                  uniqueItems: true
                  example: [
                      {
                          "traffic_window_start_times": [
                              "08:30:00"
                          ],
                          "traffic_window_end_times": [
                              "09:30:00"
                          ],
                          "traffic_window_index": 0
                      },
                      {
                          "traffic_window_start_times": [
                              "09:30:00"
                          ],
                          "traffic_window_end_times": [
                              "16:00:00"
                          ],
                          "traffic_window_index": 1
                      }
                  ]
                time_zones:
                  type: array
                  description: >
                    An array containing the time zone specific to each `location_id`; this information is not directly relevant to the distance matrix calculation, but is computed for free and thus returned to clients for their utility.
                  items:
                    type: object
                    required:
                      - location_id
                      - time_zone
                    properties:
                      location_id:
                        type: string
                        description: >
                          The top level `location_id` passed in the request.
                        example: Depot-A123
                      time_zone:
                        type: string
                        description: >
                          The IANA time zone name associated with the `location_id`.
                        example: America/New_York
                    example: [
                      {
                          "location_id": "Location-A",
                          "time_zone": "America/New_York"
                      },
                      {
                          "location_id": "Location-B",
                          "time_zone": "America/New_York"
                      },
                      {
                          "location_id": "Location-C",
                          "time_zone": "America/New_York"
                      }
                    ]

    # routing response
    # TODO: get a description of the penalties array
    # TODO: explain the obj func score in clear terms
    # TODO: do we need to include `vehicles` either w/ context?
    # TODO: echo back constraints? updated to violated_constraints
    # TODO: round numbers that are given in seconds -- fractions of a sec is odd
    # TODO: is there a maximum num of vehicles? orders? items? etc?
    RoutingResponse:
      allOf:
        - $ref: '#/components/schemas/200Response'
        - type: object
          description: >
            TODO: fill this in
          required:
            - data
          properties:
            data:
              type: object
              description: >
                TODO: fill this in
              required:
                - bounding_box
                - num_orders_routed
                - objective_function
                - orders_incomplete_visits
                - routes
                - total_distance
                - total_traffic_time
                - total_travel_time
                - violated_constraints
              properties:
                bounding_box:
                  type: object
                  description: >
                    The bounding box of the smallest rectangle that includes all routes in the solution, given as latitude and longitude values in the WGS84 reference coordinate system.
                  required:
                    - max_lat
                    - max_long
                    - min_lat
                    - min_long
                  properties:
                    max_lat:
                      type: number
                      format: float
                      description: >
                        The maximum latitude value of the bounding box.
                      example: 38.8967
                    max_long:
                      type: number
                      format: float
                      description: >
                        The maximum longitude value of the bounding box.
                      example: -77.0257
                    min_lat:
                      type: number
                      format: float
                      description: >
                        The minimum latitude value of the bounding box.
                      example: 38.8814
                    min_long:
                      type: number
                      format: float
                      description: >
                        The minimum longitude value of the bounding box.
                      example: -77.0502
                  example: {
                    "max_lat": 38.8967,
                    "max_long": -77.0257,
                    "min_lat": 38.8783,
                    "min_long": -77.0687
                    }
                num_orders_routed:
                  type: integer
                  format: int64
                  description: >
                    The number of orders routed in the solution.
                  example: 12
                objective_function:
                  type: number
                  format: double
                  description: >
                    The final score of the solution subject to the constraints provided with the problem specification. The score has arbitrary units and... should/should not be compared to other solutions? Is lower better? Higher better? Does this reveal anything about how the system works?
                  example: 1
                orders:
                  type: array
                  description: >
                    An array of order objects. This object accounts for the status of all orders provided in the routing problem -- including orders that were not routed. Useful if a client wants to determine order status in more convenient data structure than parsing `items_delivered` and `items_picked_up` contained in the `routes` object.
                  items:
                    $ref: '#/components/schemas/RoutedOrder'
                  example:
                    TODO: fill this in
                orders_incomplete_visits:
                  type: array
                  description: >
                    For all the orders where the solution does not meet all the visit requirements, this provides some info into why these orders were possibly not visited (round trip travel times to start/end locations, etc.). This information is useful for surfacing to users for further action.
                  items:
                    type: object
                    description: >
                      TODO: fill this in
                    required:
                      - param-1
                    properties:
                      param-1:
                        type: string
                        description: >
                          TODO: fill this in
                        example: 
                          TODO: fill this in
                  example: 
                    TODO: fill this in
                routes:
                  type: array
                  description: >
                    An array of route objects that describe the features of a route.
                  items:
                    $ref: '#/components/schemas/Route'
                  example:
                    TODO: fill this in
                total_distance:
                  type: number
                  format: double
                  description: >
                    Sum of total distance traveled in meters across all the routes.
                  example: 1365655.0
                total_traffic_time:
                  type: number
                  format: double
                  description: >
                    Sum of estimated total traffic time in seconds across all the routes.
                  example: 9328.0
                total_travel_time:
                  type: number
                  format: double
                  description: >
                    Sum of the total travel time in seconds across all of the routes.
                  example: 78680.0
                violated_constraints:
                  type: array
                  description: >
                    An array of constraints violated in the problem. This object echos the constraints as defined in the request, but only includes those constraints which experience violations and to what total penalty. This information is useful for tuning input problem parameters.
                  items:
                    type: object
                    description: >
                      TODO: fill this in
                    required:
                      - constraint_name
                      - total_penalty
                    properties:
                      constraint_name:
                        type: string
                        description: >
                          Arbitrary, human-readable name of the constraint. Echos the client supplied `constraint_name` in the request.
                        example: Visit Sequence Constraint
                      total_penalty:
                        type: number
                        format: float
                        description: >
                          TODO: fill this in
                        example: 875.3

  #headers:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-KEY
      in: header

  # links to reusable response contents
  links:
    GetJobByJobId:
      description: >
        The `jobid` value returned in the response can be used as the the
        `jobid` parameter in other `GET` paths.
      operationId: postRouting
      parameters:
        jobId: $response.body#/jobid

  #callbacks:

# security
security:
  - ApiKeyAuth: []
