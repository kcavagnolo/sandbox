{
  "openapi" : "3.0.0",
  "servers" : [ {
    "url" : "https://public-api.mapanything.io/mare/v1",
    "description" : "Production server"
  }, {
    "url" : "http://api.devmare.com/v1",
    "description" : "Development server"
  }, {
    "url" : "http://api.devmare.com/sandbox",
    "description" : "Sandbox server"
  } ],
  "info" : {
    "version" : "1.0.0",
    "title" : "MapAnything Optimization API's",
    "description" : "API for optimizing the Location of Things (LoT)\nThis is a sample server Petstore server. You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). For this sample, you can use the api key `special-key` to test the authorization filters.\n# Introduction\nThis API is documented in **OpenAPI format** and is based on [Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team. It was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo) tool and [ReDoc](https://github.com/Rebilly/ReDoc) documentation. In addition to standard OpenAPI syntax we use a few [vendor extensions](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md).\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on [Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team. It was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo) tool and [ReDoc](https://github.com/Rebilly/ReDoc) documentation. In addition to standard OpenAPI syntax we use a few [vendor extensions](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md).\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n# Authentication\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications. <!-- ReDoc-Inject: <security-definitions> -->\n# Helpful Links\n",
    "termsOfService" : "https://mapanything.com/trust/terms-of-service",
    "contact" : {
      "name" : "MapAnything API Support",
      "email" : "support@mapanything.com",
      "url" : "https://mapanything.force.com/support"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "externalDocs" : {
    "url" : "https://developer.mapanything.com/",
    "description" : "Visit the MapAnything Developer Portal"
  },
  "paths" : {
    "/health" : {
      "get" : {
        "summary" : "Service health check",
        "description" : "Some general information on the API and state of the service\n",
        "operationId" : "getHealth",
        "responses" : {
          "200" : {
            "description" : "Service health",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HealthResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags" : [ "Health" ]
      }
    },
    "/matrix" : {
      "post" : {
        "summary" : "Submit distance matrix request",
        "description" : "Takes a set of locations and provides estimates for the travel distance and time between each.\n",
        "operationId" : "postMatrix",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MatrixJob"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Job submitted successfully\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobResponse"
                }
              }
            },
            "links" : {
              "GetJobByJobId" : {
                "$ref" : "#/components/links/GetJobByJobId"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error(s)\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags" : [ "Matrix" ]
      }
    },
    "/matrix/{jobId}" : {
      "parameters" : [ {
        "name" : "jobId",
        "in" : "path",
        "description" : "JobId supplied in the response of the original submitted request\n",
        "required" : true,
        "schema" : {
          "type" : "string",
          "format" : "byte",
          "example" : "mare-us-east-1-matrix-1525975072.20048"
        }
      } ],
      "get" : {
        "summary" : "Access distance matrix request",
        "description" : "Returns the status of a single job based on the ID supplied\n",
        "operationId" : "getMatrixById",
        "responses" : {
          "200" : {
            "description" : "Job status and, if the job is complete, URL of JSON result",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobStatus"
                }
              }
            }
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags" : [ "Matrix" ]
      }
    },
    "/routing" : {
      "post" : {
        "summary" : "Submit vehicle routing request",
        "description" : "Provides a very powerful and flexible way of solving your largest and most complex routing and scheduling problems.\n",
        "operationId" : "postRouting",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RoutingJob"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Job submitted successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/JobResponse"
                }
              }
            },
            "links" : {
              "GetJobByJobId" : {
                "$ref" : "#/components/links/GetJobByJobId"
              }
            }
          },
          "default" : {
            "description" : "unexpected error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags" : [ "Routing" ]
      }
    },
    "/routing/{jobId}" : {
      "parameters" : [ {
        "name" : "jobId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string",
          "format" : "byte"
        }
      } ],
      "delete" : {
        "summary" : "Abort or Cancel a Job",
        "operationId" : "deleteRoutingById",
        "responses" : {
          "204" : {
            "description" : "Job successfully deleted."
          },
          "404" : {
            "description" : "Job not found."
          }
        },
        "tags" : [ "Routing" ]
      },
      "get" : {
        "summary" : "Returns the status of the job",
        "operationId" : "getRoutingById",
        "responses" : {
          "404" : {
            "description" : "Job not found."
          }
        },
        "tags" : [ "Routing" ]
      }
    },
    "/repair" : {
      "post" : {
        "summary" : "Accepts a Repair Job and Returns Job Status (May include payload?)",
        "operationId" : "postRepair",
        "responses" : {
          "201" : {
            "description" : "Repair Async Job submitted successfully."
          }
        },
        "tags" : [ "Repair" ],
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Repair_Job_JSON"
        }
      }
    },
    "/repair/{jobId}" : {
      "parameters" : [ {
        "name" : "jobId",
        "in" : "path",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "delete" : {
        "summary" : "Abort or Cancel a Job",
        "operationId" : "deleteRepairById",
        "responses" : {
          "204" : {
            "description" : "Job successfully deleted."
          },
          "404" : {
            "description" : "Job not found."
          }
        },
        "tags" : [ "Repair" ]
      },
      "get" : {
        "summary" : "Returns the status of the job",
        "operationId" : "getRepairById",
        "responses" : {
          "404" : {
            "description" : "Job not found."
          }
        },
        "tags" : [ "Repair" ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "Appointment" : {
        "type" : "object",
        "description" : "A generalized object describing appointments to satisfy in the routing problem.\n",
        "required" : [ "appointment_start", "appointment_end" ],
        "properties" : {
          "appointment_start" : {
            "type" : "string",
            "format" : "byte",
            "description" : "Start local time given as an ISO 8601 time format. Used in conjunction with `appointment_end` parameter.\n",
            "example" : "2018-10-02T12:30:00-04:00"
          },
          "appointment_end" : {
            "type" : "string",
            "format" : "byte",
            "description" : "End local time given as an ISO 8601 time format. Used in conjunction with `appointment_start` parameter.\n",
            "example" : "2018-10-02T14:30:00-04:00"
          }
        }
      },
      "Order" : {
        "type" : "object",
        "description" : "Describes the orders and their attributes for creating routes.",
        "required" : [ "order_id", "location_id" ],
        "properties" : {
          "order_id" : {
            "type" : "string",
            "format" : "byte",
            "description" : "Unique identifier for the order",
            "example" : "OrderABC123"
          },
          "location_id" : {
            "type" : "string",
            "format" : "byte",
            "description" : "Identifier for the location of this order",
            "example" : "DistributionCenter-A1"
          },
          "pickup_item_quantities" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "item_type", "quantity" ],
              "properties" : {
                "item_type" : {
                  "type" : "string",
                  "format" : "byte",
                  "description" : "An item type defined in the top-level `item` object\n",
                  "example" : "lumber"
                },
                "quantity" : {
                  "type" : "number",
                  "format" : "double",
                  "description" : "The quantity of the `item_type` to pickup.\n",
                  "example" : 10.5
                }
              }
            },
            "uniqueItems" : true,
            "description" : "Array of items that specify an `item_type` and `quantity`. The `item_type` must be contained in the upper level `items` object. If this keyword is not provided, MARE will not account for any pickups.\n",
            "example" : [ {
              "item_type" : "bricks",
              "quantity" : 200
            } ]
          },
          "delivery_item_quantities" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "required" : [ "item_type", "quantity" ],
              "properties" : {
                "item_type" : {
                  "type" : "string",
                  "format" : "byte",
                  "description" : "An item type defined in the top-level `item` object\n",
                  "example" : "lumber"
                },
                "quantity" : {
                  "type" : "number",
                  "format" : "double",
                  "description" : "The quantity of the `item_type` to pickup.\n",
                  "example" : 10.5
                }
              }
            },
            "uniqueItems" : true,
            "description" : "Array of items that specify an `item_type` and `quantity`. The `item_type` must be contained in the upper level `items` object. If this keyword is not provided, MARE will not account for any deliveries.\n",
            "example" : [ {
              "item_type" : "bricks",
              "quantity" : 200
            } ]
          },
          "duration" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The duration in seconds of the time required to service this order. If this keyword is not provided, MARE assumes the order is unrealistically satisfied instantaneously.\n",
            "default" : 0,
            "example" : 3600
          },
          "appointments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Appointment"
            },
            "minItems" : 1,
            "uniqueItems" : false,
            "description" : "Rigidly fixed start and end times for an appointment. Note that when an appointment is provided, the `duration` parameter of the order (if given) is ignored when MARE schedules the appointment(s).\n",
            "example" : [ {
              "appointment_start" : "2018-10-02T12:30:00-04:00",
              "appointment_end" : "2018-10-02T14:30:00-04:00"
            } ]
          },
          "time_windows" : {
            "type" : "object",
            "description" : "Flexible range of service start times for an order. MARE may decide that a vehicle will arrive early and idle before starting service at this order depending on the `Time_Window` constraint and penalty. **NOTE: if the `Time_Window` constraint is not provided, then these `time_windows` are ignored because MARE does not know the relative importance of meeting `time_windows`.**\n",
            "required" : [ "start_time_window", "end_time_window" ],
            "properties" : {
              "start_time_window" : {
                "type" : "string",
                "format" : "byte",
                "description" : "The start time, given as an ISO 8601 time format.",
                "example" : "2018-10-01T14:00:00-04:00"
              },
              "end_time_window" : {
                "type" : "string",
                "format" : "byte",
                "description" : "The end time, given as an ISO 8601 time format.",
                "example" : "2018-10-01T16:30:00-04:00"
              }
            }
          },
          "attributes" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            },
            "minItems" : 1,
            "uniqueItems" : true,
            "description" : "List of arbitrary attributes associated with the order to create an affinity between vehicles and orders. These strings must exactly match with the vehicle `attribute` parameters and are enforced via the `match_attributes` constraint.\n",
            "example" : [ "only likes Jim", "needs anesthesia car", "Spanish only" ]
          },
          "min_visits" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Minimum number of visits this order must receive over the planning period. Enforced via the `Visit_Range` constraint.\n",
            "minimum" : 1,
            "default" : 1,
            "example" : 3
          },
          "max_visits" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Maximum number of visits this order must receive over the planning period. Enforced via the `Visit_Range` constraint.\n",
            "minimum" : 1,
            "default" : 1,
            "example" : 10
          },
          "min_gap" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Minimum number of days between visits. Enforced via the `Visit_Gap` constraint.\n",
            "example" : 11
          },
          "urgency" : {
            "type" : "integer",
            "format" : "int64",
            "minimum" : 1,
            "maximum" : 99,
            "description" : "When coupled with the Urgency constraint, a penalty is incurred when the order is not visited early enough in the planning period.\n",
            "example" : 42
          },
          "priority" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Some positive integer representing the importance of this order relative to others. To be enforced, must also specify `Order_Priority` constraint. If some orders have priorities and others do not, then orders without a priority will default to 1. To encourage an order to be visited, set a priority greater than 1 and use the `Priority` constraint.\n",
            "default" : 1,
            "example" : 5
          }
        }
      },
      "Item" : {
        "type" : "object",
        "description" : "A generalized object describing a unit to be picked-up or delivered in the routing problem.\n",
        "required" : [ "item_type" ],
        "properties" : {
          "item_type" : {
            "type" : "string",
            "format" : "byte",
            "description" : "String that identifies the type of item. For example, 'lumber' or 'frozen meat.' Refer to the example to get started quickly.\n",
            "example" : "lumber"
          },
          "volume" : {
            "type" : "number",
            "format" : "double",
            "description" : "Volume of item in cubic centimeters",
            "example" : 1000.2
          },
          "weight" : {
            "type" : "number",
            "format" : "double",
            "description" : "Weight of item in kilograms",
            "example" : 10.2
          },
          "attributes" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            },
            "minItems" : 1,
            "uniqueItems" : true,
            "description" : "List of attributes that may be used to describe an affinity between items and orders or vehicles.\n",
            "example" : [ "pine", "treated", "20ft" ]
          }
        }
      },
      "ItemQty" : {
        "type" : "object",
        "description" : "Describes a generalized (item_type, value) pair that a vehicle can carry. Each key must be an item_type given in the `items` object.\n",
        "required" : [ "item_type", "quantity" ],
        "properties" : {
          "item_type" : {
            "type" : "string",
            "format" : "byte",
            "description" : "Type of item; must be an `item_type` given in the `items` object.\n",
            "example" : "lumber"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "A value representing the _number_ of items this vehicle can carry. Recall, properties of the `item_type` are specified in the `items` object, but not the quantity, which is specified at the `vehicle` level.\n",
            "default" : 1,
            "minimum" : 1,
            "example" : 5
          }
        }
      },
      "Location" : {
        "type" : "object",
        "description" : "Represents the points of interest to be used for the matrix. Currently, `latitude` and `longitude` must be specified meaning addresses must first be geocoded.\n",
        "required" : [ "latitude", "longitude", "location_id" ],
        "properties" : {
          "latitude" : {
            "type" : "number",
            "format" : "float",
            "description" : "Location's latitude value in the WGS84 reference coordinate system.\n",
            "example" : 33.8730743
          },
          "longitude" : {
            "type" : "number",
            "format" : "float",
            "description" : "Location's longitude value in the WGS84 reference coordinate system.\n",
            "example" : -84.3951042
          },
          "location_id" : {
            "type" : "string",
            "format" : "byte",
            "description" : "A unique string identifier for each location.\n",
            "example" : "Depot-A123"
          },
          "location_class" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            },
            "minItems" : 1,
            "maxItems" : 10,
            "uniqueItems" : true,
            "description" : "If provided, then MARE associates a set of classes with the location. This can be used to reduce the size of the response. For example, if a `location_class array` is provided for both a `source` and `destination` location, then MARE only includes the travel costs if the intersection of the `source` `location_class` and `destination` `location_class` is non-empty. This behavior can be further modified by using the `force_containment` parameter. For example, a `source` might be a plumber or an electrician, and a `destination` would be a job that requires a plumber or electrician. Thus, the `location_class` allows one to filter the matrix so that only relevant paths are returned based on attributes of the locations.\n",
            "example" : [ 0, 2, 3, 6 ]
          }
        }
      },
      "Shift" : {
        "type" : "object",
        "description" : "A generalized object describing a shift to be applied to a vehicle used in the routing problem.\n",
        "required" : [ "shift_id", "shift_start", "shift_end", "start_location_id", "end_location_id" ],
        "properties" : {
          "shift_id" : {
            "type" : "string",
            "format" : "byte",
            "description" : "Unique identifier for the shift",
            "example" : "Tuesday Polishing or Painting"
          },
          "shift_start" : {
            "type" : "string",
            "format" : "byte",
            "description" : "Start local time given as an ISO 8601 time format. Used in conjunction with `shift_end` parameter.\n",
            "example" : "2018-10-02T12:30:00-04:00"
          },
          "shift_end" : {
            "type" : "string",
            "format" : "byte",
            "description" : "End local time given as an ISO 8601 time format. Used in conjunction with `shift_start` parameter.\n",
            "example" : "2018-10-02T12:30:00-04:00"
          },
          "start_location_id" : {
            "type" : "string",
            "format" : "byte",
            "description" : "Unique identifier for the starting location of the vehicle; must be identical to one of a location in the `locations` keyword.\n",
            "example" : "location-a"
          },
          "end_location_id" : {
            "type" : "string",
            "format" : "byte",
            "description" : "Unique identifier for the ending location of the vehicle; must be identical to one of a location in the `locations` keyword.\n",
            "example" : "location-b"
          }
        }
      },
      "Vehicle" : {
        "type" : "object",
        "description" : "Describes the vehicle and its attributes for estimating travel times. The fastest response times will be with vehicle type car.\n",
        "required" : [ "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "format" : "byte",
            "description" : "The mode of transport\n  * `car` - A car\n  * `truck` - A truck\n  * `bicycle` - A bike\n  * `pedestrian` - A walking human\n",
            "enum" : [ "car", "truck", "bicycle", "pedestrian" ],
            "default" : "car",
            "example" : "truck"
          },
          "hazmat" : {
            "type" : "boolean",
            "description" : "**TRUCK ONLY** True if this vehicle is subject to hazmat restrictions.\n",
            "enum" : [ true, false ],
            "default" : false,
            "example" : true
          },
          "height" : {
            "type" : "number",
            "format" : "float",
            "description" : "**TRUCK ONLY** Vehicle height in meters.\n",
            "example" : 4.27
          },
          "length" : {
            "type" : "number",
            "format" : "float",
            "description" : "**TRUCK ONLY** Vehicle length in meters.\n",
            "example" : 14.63
          },
          "num_axles" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "**TRUCK ONLY** Describes vehicle properties in order to restrict routing to allowable roads.\n",
            "example" : 5
          },
          "weight" : {
            "type" : "number",
            "format" : "float",
            "description" : "**TRUCK ONLY** Vehicle weight in kilograms.\n",
            "example" : 36287
          },
          "width" : {
            "type" : "number",
            "format" : "float",
            "description" : "**TRUCK ONLY** Vehicle width in meters.\n",
            "example" : 2.44
          }
        }
      },
      "RoutingVehicle" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Vehicle"
        }, {
          "type" : "object",
          "required" : [ "shifts", "vehicle_id" ],
          "properties" : {
            "shifts" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Shift"
              },
              "minItems" : 1,
              "uniqueItems" : true,
              "description" : "Each entry describes the start and end location, shifts and breaks of the vehicle during the problem. A vehicle is allowed to be traveling and servicing orders only during some shift. Shifts cannot overlap for a given vehicle. Currently `start_location_id` and `end_location_id` are required, but we understand the need for \"open\" routes where either or both are not specified.\n",
              "example" : [ {
                "shift_id" : "Tuesday_Polishing_Or_Painting",
                "shift_start" : "2018-10-02T09:00:00-04:00",
                "shift_end" : "2018-10-02T18:00:00-04:00",
                "start_location_id" : "location-a",
                "end_location_id" : "location-b"
              } ]
            },
            "vehicle_id" : {
              "type" : "string",
              "format" : "byte",
              "description" : "Unique identifier of the vehicle.",
              "example" : "truck-abc123"
            },
            "volume_capacity" : {
              "type" : "number",
              "format" : "double",
              "description" : "Maximum vehicle volumetric capacity in cubic centimeters.",
              "example" : 534422.1
            },
            "weight_capacity" : {
              "type" : "number",
              "format" : "double",
              "description" : "Maximum vehicle weight capacity in kilograms",
              "example" : 42331.2
            },
            "capacity_by_item" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ItemQty"
              },
              "minItems" : 1,
              "uniqueItems" : true,
              "description" : "Describes a set of (`item_type`, `quantity`) pairs that the vehicle can carry. Each key must be an `item_type` given in the `items` object. If this is not given, MARE assumes the vehicle has an infinite capacity on a per-item basis. Mixing different items is handled by `volume_capacity`, in cubic meters or `weight_capacity` in kg. By default, if this keyword is not given, MARE will not take into account any capacities by item.\n"
            },
            "attributes" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "byte"
              },
              "minItems" : 1,
              "uniqueItems" : true,
              "description" : "List of arbitrary attributes associated with a vehicle in the `vehicles` object to create an affinity between vehicles and orders. These strings must exactly match with the order `attribute` parameters and are enforced via the `match_attributes` constraint.\n",
              "example" : [ "does not like Jim", "bucket truck", "Tamil only" ]
            }
          }
        } ]
      },
      "Constraint" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "constraint_type"
        },
        "description" : "A generalized object describing a constraint to be applied in the routing problem. Constraint options are provided in the Examples.\n",
        "required" : [ "constraint_name", "constraint_type", "penalty_per_violation" ],
        "properties" : {
          "constraint_name" : {
            "type" : "string",
            "format" : "byte",
            "description" : "Arbitrary, human-readable name of the constraint.\n",
            "example" : "Visit Sequence Constraint: order3 before order7"
          },
          "constraint_type" : {
            "type" : "string",
            "format" : "byte",
            "description" : "A type of constraint that can be applied in solving the routing problem.\n",
            "example" : "Max_Distance"
          },
          "penalty_per_violation" : {
            "type" : "number",
            "format" : "double",
            "description" : "Numeric value that quantifies the amount of penalty assigned to each violation of the constraint. Values should be made specific to the `constraint_type` and the routing problem.\n",
            "example" : 10000
          },
          "constraint_id" : {
            "type" : "string",
            "format" : "byte",
            "description" : "Unique identifier for the constraint for user reference. This could refer to an internal database key or some other identifier of use to the requestor. If unspecified, no value is used.\n",
            "example" : "Non-negotiable Constraint1"
          },
          "violation_increment" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "For constraints that involve a numerical threshold, an additional `penalty_per_violation` is assessed for every `violation_increment` units over the threshold. For example, if a constraint specifies that no route should last more than 500 minutes of total time with a penalty of 100, and you specify a `violation_increment` of 10, then a route of 523 minutes would receive a penalty of 300. 100 is for the initial violation, and then 2 x 100 more for exceeding the threshold by 23.\n",
            "example" : 10
          },
          "hard_constraint" : {
            "type" : "boolean",
            "description" : "**WARNING! This parameter has the potential to return no results frequently. Use at your own risk.** If set to `true`, then the constraint is treated as a truly hard constraint, i.e. no violations with no exceptions; thus guaranteeing no solutions will be returned that violate it.\n",
            "enum" : [ true, false ],
            "default" : false,
            "example" : true
          }
        }
      },
      "First_Visit" : {
        "description" : "Ensure that order A is the first order serviced on the route.\n",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Constraint"
        }, {
          "type" : "object",
          "required" : [ "order_ids" ],
          "properties" : {
            "order_ids" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "byte"
              },
              "minItems" : 1,
              "uniqueItems" : true,
              "description" : "IDs of the order to be visited first in their route.",
              "example" : [ "order-abc123", "order-qrs456" ]
            },
            "vehicle_id" : {
              "type" : "string",
              "format" : "byte",
              "description" : "The order that must be visited by the provided vehicle.",
              "example" : "vehicle-A1Z9"
            }
          }
        } ]
      },
      "Last_Visit" : {
        "description" : "Ensure that order A is the last order serviced on the route.\n",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Constraint"
        }, {
          "type" : "object",
          "required" : [ "vehicle_id", "order_ids" ],
          "properties" : {
            "vehicle_id" : {
              "type" : "string",
              "format" : "byte",
              "description" : "Order must be visited by the provided vehicle.",
              "example" : "vehicle-A1Z9"
            },
            "order_ids" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "byte"
              },
              "minItems" : 1,
              "uniqueItems" : true,
              "description" : "IDs fo the order to be visited in their route.",
              "example" : [ "order-abc123", "order-xyz789" ]
            }
          }
        } ]
      },
      "Max_Distance" : {
        "description" : "Ensure that the route for a vehicle does not exceed a maximum distance. Applies to all routes if specifics not provided.\n",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Constraint"
        }, {
          "type" : "object",
          "required" : [ "max_km" ],
          "properties" : {
            "max_km" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "This will penalize 1 unit if a route exceeds `max_km`. For example, if the `max_km` is set to 10 and the `violation_increment` is set to 10, then there would be a penalty of 2 for a route 30 km in length. If this constraint is not given, MARE will not account for travel distance at all.\n",
              "example" : 10
            }
          }
        } ]
      },
      "Scheduled_Appointment" : {
        "description" : "Ensure an order is serviced during an appointment window.\n",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Constraint"
        }, {
          "type" : "object",
          "required" : [ "order_ids" ],
          "properties" : {
            "order_ids" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "byte"
              },
              "minItems" : 1,
              "uniqueItems" : true,
              "description" : "The orders that have scheduled appointments.\n",
              "example" : [ "order-abc123", "order-qrs456" ]
            }
          }
        } ]
      },
      "Time_Window" : {
        "description" : "Ensure that the arrival time at order A is between two times.\n",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Constraint"
        }, {
          "type" : "object",
          "required" : [ "order_ids" ],
          "properties" : {
            "order_ids" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "byte"
              },
              "minItems" : 1,
              "uniqueItems" : true,
              "description" : "ID of the orders whose time window we want to respect. Applies to all orders if not given.\n",
              "example" : [ "order-abc123", "order-xyz789" ]
            }
          }
        } ]
      },
      "Travel_Time" : {
        "description" : "Ensure that the route for a vehicle does not exceed a maximum duration. Applies to all routes if specifics not provided.\n",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Constraint"
        }, {
          "type" : "object",
          "required" : [ "max_travel_time_seconds" ],
          "properties" : {
            "max_travel_time_seconds" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "This will penalize 1 unit if a route exceeds `max_travel_time_seconds`. For example, if the `max_travel_time_seconds` is set to 3600 (one hour in seconds) and the `violation_increment` is set to 600 (ten minutes in seconds), then there would be a penalty of 2 for a route 4800 seconds in duration. If this constraint is not given, MARE will not account for travel distance at all.\n",
              "example" : 3600
            }
          }
        } ]
      },
      "Visit_Gap" : {
        "description" : "Ensure the spacing of visits at an order meet requirements.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Constraint"
        }, {
          "type" : "object",
          "required" : [ "order_sets" ],
          "properties" : {
            "order_sets" : {
              "type" : "array",
              "items" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "format" : "byte"
                }
              },
              "description" : "This can be used to specify order sets, in which case the gap is checked between all visits occurring for any order in each set. Otherwise, you can specify specific orders for this constraint. If no orders are specified, it defaults to all orders. The time between two consecutive visits at an order is the difference in the arrival times at the orders. This constraint is evaluated in terms of the order’s `min_days` and `max_days` properties over entire planning period, as well as those within each period object in the order over that period. A day is converted to seconds behind the scenes.\n",
              "example" : [ [ "order1", "order2", "order5" ], [ "order3", "order4" ] ]
            }
          }
        } ]
      },
      "Visit_Range" : {
        "description" : "Ensure an order receives a specified minimum and/or maximum number of visits over the planning period. You can specify order sets, in which case each set is checked by summing visits across all orders in that set. Otherwise orders are checked individually. This constraint checks using the min_visits and max_visits values specified in order object over entire planning period, as well as parameters specified in each period object in the order for each subset of the planning period.\n",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Constraint"
        }, {
          "type" : "object",
          "required" : [ "order_sets" ],
          "properties" : {
            "order_sets" : {
              "type" : "array",
              "items" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "format" : "byte"
                }
              },
              "description" : "Can be used to specify order sets, in which case each set is checked by summing visits across all orders in that set. Otherwise orders are checked individually. These are checked using `min_visits` and `max_visits` values specified in the `order` object over the entire planning period, as well as parameters specified in each `period` object in the order for each subset of the planning period. MARE uses the arrival time at the order when evaluating this constraint. Users can also specify specific orders for this constraint – otherwise applied to all orders by default.\n",
              "example" : [ [ "order1", "order2", "order5" ], [ "order3", "order4" ] ]
            }
          }
        } ]
      },
      "Visit_Sequence" : {
        "description" : "Ensure that order A and order B are visited on the same day by the same vehicle, and that A is serviced before B.\n",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Constraint"
        }, {
          "type" : "object",
          "required" : [ "first_order_id", "second_order_id" ],
          "properties" : {
            "first_order_id" : {
              "type" : "string",
              "format" : "byte",
              "description" : "Unique ID of the order to be visited first.",
              "example" : "order-abc123"
            },
            "second_order_id" : {
              "type" : "string",
              "format" : "byte",
              "description" : "Unique ID of the order to be visited second.",
              "example" : "order-xyz789"
            },
            "same_route" : {
              "type" : "boolean",
              "description" : "If true, then the two orders must be visited on the same route. If false, then no violation if they are on different routes as long as arrival time at first order is earlier than arrival time at second order.\n",
              "enum" : [ true, false ],
              "default" : false,
              "example" : true
            }
          }
        } ]
      },
      "MatrixJob" : {
        "type" : "object",
        "description" : "Complex object containing information about locations and a vehicle needed to build distance matrix.\n",
        "required" : [ "locations", "vehicle" ],
        "properties" : {
          "locations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Location"
            },
            "minItems" : 1,
            "maxItems" : 7500,
            "uniqueItems" : true,
            "example" : [ {
              "location_id" : "example-a",
              "latitude" : 33.937244,
              "longitude" : -84.36947
            }, {
              "location_id" : "example-b",
              "latitude" : 33.887576,
              "longitude" : -84.261385
            }, {
              "location_id" : "example-c",
              "latitude" : 33.89681,
              "longitude" : -84.327653
            } ]
          },
          "vehicle" : {
            "$ref" : "#/components/schemas/Vehicle"
          },
          "sources" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            },
            "minItems" : 1,
            "maxItems" : 10,
            "uniqueItems" : true,
            "description" : "If the full n x n matrix is not desired, sources and destinations arrays can be used to provide the indices of the locations that are sources/destinations. All indices must be in {0,1,2,...,n-1} and only paths from a source to a destination will be provided. Note that both sources and destinations, should both be used or not at all.\n",
            "example" : [ 0, 2 ]
          },
          "destinations" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            },
            "minItems" : 1,
            "maxItems" : 10,
            "uniqueItems" : true,
            "description" : "If the full n x n matrix is not desired, `sources` and `destinations` arrays can be used to provide the indices of the locations that are desired source/destination pairs. All indices must be in {0,1,2,...,n-1} and only paths from a source to a destination will be provided. Note that both sources and destinations, should both be used or not at all.\n",
            "example" : [ 1 ]
          },
          "force_containment" : {
            "type" : "boolean",
            "description" : "If provided along with `location_classes` for `sources` and `destinations`, then MARE only returns information for `source`-`destination` pairs where the `source` location classes completely contain the `destination` location classes.\n",
            "enum" : [ true, false ],
            "example" : false
          },
          "start_local_time" : {
            "type" : "string",
            "format" : "byte",
            "description" : "Start local time in 24-hour _hh:mm:ss_ format. Used in conjunction with `end_local_time` parameter.\n",
            "example" : "09:00:00"
          },
          "end_local_time" : {
            "type" : "string",
            "format" : "byte",
            "description" : "End local time in 24-hour _hh:mm:ss_ format. Used in conjunction with `start_local_time` parameter.\n",
            "example" : "17:00:00"
          },
          "num_neighbors" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "If provided, the response will only contain information about paths from any location to its nearest `num_neighbors` destinations.\n",
            "example" : 5
          },
          "max_travel_time" : {
            "type" : "number",
            "format" : "double",
            "description" : "Return only those travel times in seconds that are less than `max_travel_time` across all traffic windows.\n",
            "example" : 3600
          },
          "radius" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "MARE looks for the nearest street segment within `radius` meters of `latitude` and `longitude` within the `locations` object. Can be useful in rural and other areas where not all streets are included in the map data.\n",
            "default" : 1500,
            "example" : 3000
          },
          "weekend" : {
            "type" : "boolean",
            "description" : "If `true`, MARE defaults to the fastest available traffic window corresponding to weekend/free flow traffic patterns, otherwise MARE defaults to returning travel times for multiple traffic windows, depending on whether `start_local_time` and `end_local_time` are provided.\n",
            "enum" : [ true, false ],
            "default" : false,
            "example" : false
          }
        }
      },
      "RoutingJob" : {
        "type" : "object",
        "description" : "Complex object containing information about locations, orders, vehicles, and constraints needed to build optimal routing solution.\n",
        "required" : [ "locations", "orders", "vehicles", "constraints" ],
        "properties" : {
          "locations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Location"
            },
            "minItems" : 1,
            "maxItems" : 7500,
            "uniqueItems" : true,
            "example" : [ {
              "location_id" : "location-a",
              "latitude" : 33.937244,
              "longitude" : -84.36947
            }, {
              "location_id" : "location-b",
              "latitude" : 33.887576,
              "longitude" : -84.261385
            }, {
              "location_id" : "location-c",
              "latitude" : 33.89681,
              "longitude" : -84.327653
            } ]
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Order"
            },
            "minItems" : 1,
            "maxItems" : 7500,
            "uniqueItems" : true,
            "example" : [ {
              "location_id" : "loc1",
              "order_name" : "Service Washington Monument",
              "order_id" : "DC-1",
              "duration" : 3600,
              "priority" : 3,
              "min_visits" : 2
            }, {
              "location_id" : "loc2",
              "order_name" : "Service Ford's Theatre",
              "order_id" : "DC-2",
              "duration" : 3600,
              "priority" : 2,
              "min_visits" : 2
            } ]
          },
          "vehicles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RoutingVehicle"
            },
            "minItems" : 1,
            "maxItems" : 7500,
            "uniqueItems" : true,
            "example" : "abc"
          },
          "constraints" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Constraint"
            }
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Item"
            }
          }
        }
      },
      "HealthResponse" : {
        "type" : "object",
        "required" : [ "status", "servicename", "message", "api_version" ],
        "properties" : {
          "status" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 200
          },
          "message" : {
            "type" : "string",
            "format" : "byte",
            "example" : "service is healthy"
          },
          "servicename" : {
            "type" : "string",
            "format" : "byte",
            "example" : "distance matrix service"
          },
          "api_version" : {
            "type" : "string",
            "format" : "byte",
            "example" : "1.0.0-prod"
          }
        }
      },
      "ErrorResponse" : {
        "type" : "object",
        "required" : [ "status", "message", "errors" ],
        "properties" : {
          "status" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 503
          },
          "message" : {
            "description" : "Error messages",
            "type" : "string",
            "format" : "byte",
            "example" : "service experiencing errors"
          },
          "servicename" : {
            "type" : "string",
            "format" : "byte",
            "example" : "distance matrix service"
          },
          "api_version" : {
            "type" : "string",
            "format" : "byte",
            "example" : "1.0.0-prod"
          },
          "errors" : {
            "type" : "array",
            "minItems" : 1,
            "uniqueItems" : true,
            "items" : {
              "properties" : {
                "code" : {
                  "type" : "string",
                  "description" : "Server Exception",
                  "example" : [ "ServiceNotFoundError", "ServiceCorruptedError", "ZombieApocalypseError" ]
                }
              }
            }
          }
        }
      },
      "JobResponse" : {
        "description" : "Response to a submitted job\n",
        "type" : "object",
        "required" : [ "jobid", "job_type", "status", "message" ],
        "properties" : {
          "jobid" : {
            "description" : "UUID for the job",
            "type" : "string",
            "format" : "byte",
            "example" : "mare-us-east-1-matrix-1525975072.20048"
          },
          "job_type" : {
            "description" : "Type of job executed",
            "type" : "string",
            "format" : "byte",
            "enum" : [ "sync", "async" ],
            "example" : "async"
          },
          "status" : {
            "description" : "Status of the submitted job",
            "type" : "string",
            "format" : "byte",
            "example" : "Accepted"
          },
          "message" : {
            "description" : "Status message associated with submitted job",
            "type" : "string",
            "format" : "byte",
            "example" : "Check submitted job status using GET method and jobid"
          },
          "url" : {
            "description" : "URL for solution JSON file",
            "type" : "string",
            "format" : "byte",
            "example" : "https://sdfghjk.com"
          },
          "solution" : {
            "description" : "Solution JSON object"
          }
        }
      },
      "JobStatus" : {
        "type" : "object",
        "required" : [ "status" ],
        "description" : "Status of a job submitted to the async queues for distance matrix or routing services\n",
        "properties" : {
          "status" : {
            "type" : "string",
            "format" : "byte",
            "description" : "Status of the job",
            "example" : "Completed"
          },
          "url" : {
            "type" : "string",
            "format" : "byte",
            "description" : "The AWS S3 bucket location of the JSON containing the solution",
            "example" : "https://dev2-us-west-2-mare-output-da..."
          },
          "jobid" : {
            "type" : "string",
            "format" : "byte",
            "description" : "Echo back of the submitted `jobid`",
            "example" : "mare-us-west-2-routing-32-1541083494.372838-606"
          },
          "messages" : {
            "type" : "object",
            "description" : "Messages related to API status; useful for debugging",
            "properties" : {
              "comment" : {
                "type" : "string",
                "format" : "byte",
                "description" : "Information about the API or job",
                "example" : "MARE job succeeded"
              },
              "mare_version" : {
                "type" : "string",
                "format" : "byte",
                "description" : "Version number of the underlying routing engine",
                "example" : "v2822-11-gf4b52cc"
              }
            }
          }
        }
      },
      "Repair_Job_JSON" : {
        "properties" : {
          "new_order" : {
            "type" : "string"
          },
          "force_containment" : {
            "type" : "boolean"
          }
        },
        "type" : "object"
      }
    },
    "requestBodies" : {
      "Repair_Job_JSON" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Repair_Job_JSON"
            }
          }
        },
        "required" : true
      }
    },
    "securitySchemes" : {
      "ApiKeyAuth" : {
        "type" : "apiKey",
        "name" : "X-API-KEY",
        "in" : "header"
      }
    },
    "links" : {
      "GetJobByJobId" : {
        "description" : "The `jobid` value returned in the response can be used as the the `jobid` parameter in other `GET` paths.\n",
        "operationId" : "postRouting",
        "parameters" : {
          "jobId" : "$response.body#/jobid"
        }
      }
    }
  },
  "security" : [ {
    "ApiKeyAuth" : [ ]
  } ]
}