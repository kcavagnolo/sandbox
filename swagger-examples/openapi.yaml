# spec version
openapi: 3.0.0

# server URL definitions
servers:
  - url: https://public-api.mapanything.io/mare/v1
    description: Production server
  - url: http://api.devmare.com/v1
    description: Development server
  - url: http://api.devmare.com/sandbox
    description: Sandbox server

# general info about the API
info:
  version: "1.0.0"
  title: MapAnything Optimization API's
  description: API for optimizing the Location of Things (LoT)
  termsOfService: https://mapanything.com/trust/terms-of-service
  contact:
    name: MapAnything API Support
    email: support@mapanything.com
    url: https://mapanything.force.com/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# relative URLs to external documentation
externalDocs:
  url: https://developer.mapanything.com/
  description: Visit the MapAnything Developer Portal

# paths in the API
paths:

  #############################
  # distance matrix endpoints #
  #############################

  # service health
  /health:
    get:
      summary: Service health check
      description: Some general information on the API and state of the service
      operationId: get_health_check
      responses:
        200:
          description: Service health
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - /health
  
  # async job submission
  /matrix:
    post:
      summary: Submit distance matrix request
      description: Takes a set of locations and provides estimates for the travel distance and time between each.
      operationId: post_routing_job_request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatrixJob'
      responses:
        200:
          description: Job submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncSuccess'
          links:
            GetJobByJobId:
              $ref: '#/components/links/GetJobByJobId'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - /matrix
  
  # async job request
  /matrix/{jobId}:
    parameters:
      - name: jobId
        in: path
        description: JobId supplied in the response of the original submitted request
        required: true
        schema:
          type: string
          format: byte
          example: 'mare-us-east-1-matrix-1525975072.20048'
    get:
      summary: Access distance matrix request
      description: Returns the status of a single job based on the ID supplied
      operationId: get_routing_job_ops
      responses:
        200:
          description: Job status and, if the job is complete, URL of JSON result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - /matrix
  
  #####################
  # routing endpoints #
  #####################

  /routing:
    post:
      summary: Submit vehicle routing request
      description: Provides a very powerful and flexible way of solving your largest and most complex routing and scheduling problems.
      operationId: post_routing_job_request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutingJob'
      responses:
        200:
          description: Job submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncSuccess'
          links:
            GetJobByJobId:
              $ref: '#/components/links/GetJobByJobId'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - /routing
  /routing/{jobId}:
    parameters:
      - name: jobId
        in: path
        required: true
        schema:
          type: string
    delete:
      summary: Abort or Cancel a Job
      operationId: delete_routing_job_ops
      responses:
        '204':
          description: Job successfully deleted.
        '404':
          description: Job not found.
      tags:
        - /routing
    get:
      summary: Returns the status of the job
      operationId: get_routing_job_ops
      responses:
        '404':
          description: Job not found.
      tags:
        - /routing

  ####################
  # repair endpoints #
  ####################

  /repair:
    post:
      summary: Accepts a Repair Job and Returns Job Status (May include payload?)
      operationId: post_repair_job_request
      responses:
        '201':
          description: Repair Async Job submitted successfully.
      tags:
        - /repair
      requestBody:
        $ref: '#/components/requestBodies/Repair_Job_JSON'
  /repair/{jobId}:
    parameters:
      - name: jobId
        in: path
        required: true
        schema:
          type: string
    delete:
      summary: Abort or Cancel a Job
      operationId: delete_repair_job_ops
      responses:
        '204':
          description: Job successfully deleted.
        '404':
          description: Job not found.
      tags:
        - /repair
    get:
      summary: Returns the status of the job
      operationId: get_repair_job_ops
      responses:
        '404':
          description: Job not found.
      tags:
        - /repair

# components
components:
  
  # schemas
  schemas:
    
    # health check template
    HealthCheck:
      type: object
      required:
        - status
        - servicename
        - message
        - api_version
      properties:
        status:
          type: integer
          format: int64
          example: 200
        message:
          type: string
          format: byte
          example: 'service is healthy'
        servicename:
          type: string
          format: byte
          example: 'distance matrix service'
        api_version:
          type: string
          format: byte
          example: 1.0.0-prod
    
    # generic error template
    Error:
      type: object
      required:
        - status
        - message
        - errors
      properties:
        status:
          type: integer
          format: int64
          example: 503
        message:
          description: Error messages
          type: string
          format: byte
          example: 'service experiencing errors'
        servicename:
          type: string
          format: byte
          example: 'distance matrix service'
        api_version:
          type: string
          format: byte
          example: 1.0.0-prod
        errors:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            properties:
              code:
                type: string
                description: Server Exception
                example: [ServiceNotFoundError,
                          ServiceCorruptedError,
                          ZombieApocalypseError]

    # async job template
    AsyncSuccess:
      type: object
      required:
        - jobid
        - status
        - message
      properties:
        jobid:
          description: UUID for the submitted job
          type: string
          format: byte
          example: 'mare-us-east-1-matrix-1525975072.20048'
        message:
          description: Status message associated with submitted job
          type: string
          format: byte
          example: 'Check submitted job status using GET method and jobid'
        status:
          description: Status of the submitted job
          type: string
          format: byte
          example: 'Accepted'
    
    # sync job template
    #SyncSuccess:
    
    # matrix job status template
    JobStatus:
      type: object
      required:
        - status
      description: |
        Status of a job submitted to the async queues for distance matrix or routing services
      properties:
        status:
          type: string
          format: byte
          description: Status of the job
          example: 'Completed'
        url:
          type: string
          format: byte
          description: The AWS S3 bucket location of the JSON containing the solution
          example: 'https://dev2-us-west-2-mare-output-da...'
        jobid:
          type: string
          format: byte
          description: Echo back of the submitted `jobid`
          example: 'mare-us-west-2-routing-32-1541083494.372838-606'
        messages:
          type: object
          description: Messages related to API status; useful for debugging
          properties:
            comment:
              type: string
              format: byte
              description: Information about the API or job
              example: 'MARE job succeeded'
            mare_version:
              type: string
              format: byte
              description: Version number of the underlying routing engine
              example: 'v2822-11-gf4b52cc'

    # appointment template
    Appointment:
      type: object
      description: |
        A generalized object describing appointments to satisfy in the routing problem.
      required:
        - appointment_start
        - appointment_end
      properties:
        appointment_start:
          type: string
          format: byte
          description: |
            **ISO TIME OR HH:MM:SS LIKE OTHER TIMES?**
            Start local time given as an ISO 8601 time format. Used in conjunction with `appointment_end` parameter.
          example: '2018-10-02T12:30:00-04:00'
        appointment_end:
          type: string
          format: byte
          description: |
            **ISO TIME OR HH:MM:SS LIKE OTHER TIMES?**
            End local time given as an ISO 8601 time format. Used in conjunction with `appointment_start` parameter.
          example: '2018-10-02T14:30:00-04:00'

    # order template
    Order:
      type: object
      description: Describes the orders and their attributes for creating routes.
      required:
        - order_id
        - location_id
      properties:
        order_id:
          type: string
          format: byte
          description: Unique identifier for the order
          example: 'OrderABC123'
        location_id:
          type: string
          format: byte
          description: Identifier for the location of this order
          example: 'DistributionCenter-A1'
        pickup_item_quantities:
          type: array
          items:
            $ref: '#/components/schemas/Item'
          minItems: 1
          uniqueItems: true
          description: |
            **CANNOT FIND THIS IN EXAMPLES. KEYWORD CORRECT?**
            Array of items that specify an `item_id` and `quantity`. The `item_id` must be contained in the upper level `items` object. If this keyword is not provided, MARE will not account for any pickups.
          example: ---
        delivery_item_quantities:
          type: array
          items:
            $ref: '#/components/schemas/Item'
          minItems: 1
          uniqueItems: true
          description: |
            **CANNOT FIND THIS IN EXAMPLES. KEYWORD CORRECT?**
            Array of items that specify an `item_id` and `quantity`. The `item_id` must be contained in the upper level `items` object. If this keyword is not provided, MARE will not account for any deliveries.
          example: ---
        duration:
          type: integer
          format: int64
          description: |
            The duration in seconds of the time required to service this order. If this keyword is not provided, MARE assumes the order is unrealistically satisfied instantaneously.
          default: 0
          example: 3600
        appointments:
          type: array
          items:
            $ref: '#/components/schemas/Appointment'
          minItems: 1
          uniqueItems: false
          description: |
            The start and end times for fixed appointments. Note that when an appointment is provided, the `duration` parameter of the order (if given) is ignored when MARE schedules the appointment(s).
          example: [
            {
              "appointment_start": "2018-10-02T12:30:00-04:00", 
              "appointment_end": "2018-10-02T14:30:00-04:00"
            }
          ]
        time_windows:
          type: object
          description: |
            **IS THIS REDUNDANT WITH APPOINTMENTS?**
            If not given, MARE assumes this order can be visited during any shift of the problem. If given, then this tells us the range of allowable arrival times at this order. Note that MARE may decide that a vehicle will idle before visiting this order depending on the Time_Window constraint and penalty.
          required:
            - start_time_window
            - end_time_window
          properties:
            start_time_window:
              type: string
              format: byte
              description: The start time, given as an ISO 8601 time format.
              example: '2018-10-01T14:00:00-04:00'
            end_time_window:
              type: string
              format: byte
              description: The end time, given as an ISO 8601 time format.
              example: '2018-10-01T16:30:00-04:00'
        attributes:
          type: array
          items:
            type: string
            format: byte
          minItems: 1
          uniqueItems: true
          description: |
            List of arbitrary attributes associated with the order to create an affinity between vehicles and orders. These strings must exactly match with the vehicle `attribute` parameters and are enforced via the `match_attributes` constraint.
          example: ["only likes Jim",
                    "needs anesthesia car",
                    "Spanish only"]
        min_visits:
          type: integer
          format: int64
          description: |
            Minimum number of visits this order must receive over the planning period. Enforced via the `Visit_Range` constraint.
          minimum: 1
          default: 1
          example: 3
        max_visits:
          type: integer
          format: int64
          description: |
            Maximum number of visits this order must receive over the planning period. Enforced via the `Visit_Range` constraint.
          minimum: 1
          default: 1
          example: 10
        min_gap:
          type: integer
          format: int64
          description: |
            Minimum number of days between visits. Enforced via the `Visit_Gap` constraint.
          example: 11
        urgency:
          type: integer
          format: int64
          minimum: 1
          maximum: 99
          description: |
            When coupled with the Urgency constraint, a penalty is incurred when the order is not visited early enough in the planning period.
          example:
        priority:
          type: integer
          format: int64
          description: |
            Some positive integer representing the importance of this order relative to others. To be enforced, must also specify Order_Priority constraint. If some orders have priorities and others do not, then orders without a priority will default to 1. To encourage an order to be visited, set a priority greater than 1 and use the `Priority` constraint.
          default: 1
          example: 5

    # item template
    Item:
      type: object
      description: |
        A generalized object describing a unit to be picked-up or delivered in the routing problem.
      required:
        - item_type
      properties:
        item_type:
          type: string
          format: byte
          description: |
            String that identifies the type of item. For example, 'lumber' or 'frozen meat.' Refer to the example to get started quickly.
          example: 'lumber'
        volume:
          type: number
          format: double
          description: Volume of item in cubic centimeters
          example: 1000.2
        weight:
          type: number
          format: double
          description: Weight of item in kilograms
          example: 10.2
        attributes:
          type: array
          items:
            type: string
            format: byte
          minItems: 1
          uniqueItems: true
          description: |
            List of attributes that may be used to describe an affinity between items and orders or vehicles.
          example: ['pine', 'treated', '20ft']

    # item-qty template
    ItemQty:
      type: object
      description: |
        Describes a generalized (item_type, value) pair that a vehicle can carry. Each key must be an item_type given in the `items` object.
      required:
        - item_type
        - quantity
      properties:
        item_type:
          type: string
          format: byte
          description: Type of item; must be an `item_type` given in the `items` object.
          example: 'lumber'
        quantity:
          type: integer
          format: int64
          description: |
            A value representing the **NUMBER** of items this vehicle can carry. Recall, properties of the `item_type` are specified in the `items` object, but not the quantity, which is specified at the `vehicle` level.
          default: 1
          minimum: 1
          example: 5

    # location template
    Location:
      type: object
      description: |
        Represents the points of interest to be used for the matrix. Currently, `latitude` and `longitude` must be specified meaning addresses must first be geocoded.
      required:
        - latitude
        - longitude
        - location_id
      properties:
        latitude:
          type: number
          format: float
          description: |
            Location's latitude value in the WGS84 reference coordinate system.
          example: 33.8730743
        longitude:
          type: number
          format: float
          description: |
            Location's longitude value in the WGS84 reference coordinate system.
          example: -84.3951042
        location_id:
          type: string
          format: byte
          description: |
            A unique string identifier for each location.
          example: 'Depot-A123'
        location_class:
          type: array
          items:
            type: integer
            format: int64
          minItems: 1
          maxItems: 10
          uniqueItems: true
          description: |
            If provided, then MARE associates a set of classes with the location. This can be used to reduce the size of the response. For example, if a `location_class array` is provided for both a `source` and `destination` location, then MARE only includes the travel costs if the intersection of the `source` `location_class` and `destination` `location_class` is non-empty. This behavior can be further modified by using the `force_containment` parameter. For example, a `source` might be a plumber or an electrician, and a `destination` would be a job that requires a plumber or electrician. Thus, the `location_class` allows one to filter the matrix so that only relevant paths are returned based on attributes of the locations.
          example: [0, 2, 3, 6]
    
    # shift template
    Shift:
      type: object
      description: |
        A generalized object describing a shift to be applied to a vehicle used in the routing problem.
      required:
        - shift_id
        - shift_start
        - shift_end
        - start_location_id
        - end_location_id
      properties:
        shift_id:
          type: string
          format: byte
          description: Unique identifier for the shift
          example: 'Tuesday Polishing or Painting'
        shift_start:
          type: string
          format: byte
          description: |
            **ISO TIME OR HH:MM:SS LIKE OTHER TIMES?**
            Start local time given as an ISO 8601 time format. Used in conjunction with `shift_end` parameter.
          example: '2018-10-02T12:30:00-04:00'
        shift_end:
          type: string
          format: byte
          description: |
            **ISO TIME OR HH:MM:SS LIKE OTHER TIMES?**
            End local time given as an ISO 8601 time format. Used in conjunction with `shift_start` parameter.
          example: '2018-10-02T12:30:00-04:00'
        start_location_id:
          type: string
          format: byte
          description: |
            Unique identifier for the starting location of the vehicle; must be identical to one of a location in the `locations` keyword.
          example: 'location-a'
        end_location_id:
          type: string
          format: byte
          description: |
            Unique identifier for the ending location of the vehicle; must be identical to one of a location in the `locations` keyword.
          example: 'location-b'
    
    # matrix vehicle template
    Vehicle:
      type: object
      description: |
        Describes the vehicle and its attributes for estimating travel times. The fastest response times will be with vehicle type car.
      required:
        - type
      properties:
        type:
          type: string
          format: byte
          description: The mode of transport.
          enum:
            - car
            - truck
            - bicycle
            - pedestrian
          example: truck
        hazmat:
          type: boolean
          description: True if this vehicle is subject to hazmat restrictions (**TRUCK ONLY**).
          enum:
            - true
            - false
          example: true
        height:
          type: number
          format: float
          description: Vehicle height in meters (**TRUCK ONLY**).
          example: 4.27
        length:
          type: number
          format: float
          description: Vehicle length in meters (**TRUCK ONLY**).
          example: 14.63
        num_axles:
          type: integer
          format: int64
          description: Describes vehicle properties in order to restrict routing to allowable roads (**TRUCK ONLY**).
          example: 5
        weight:
          type: number
          format: float
          description: Vehicle weight in kilograms (**TRUCK ONLY**).
          example: 36287
        width:
          type: number
          format: float
          description: Vehicle width in meters (**TRUCK ONLY**).
          example: 2.44

    # constraint template
    Constraint:
      type: object
      description: |
        A generalized object describing a constraint to be applied in the routing problem. Constraint options are provided in the Examples.
      required:
        - constraint_name
        - constraint_type
        - penalty_per_violation
      properties:
        constraint_name:
          type: string
          format: byte
          description: Arbitrary, human-readable name of the constraint.
          example: 'Visit Sequence Constraint: order3 before order7'
        constraint_type:
          type: string
          format: byte
          description: 

    # vehicle template
    RoutingVehicle:
      type: object
      description: |
        Describes the complex vehicle used in routing. **NOT IDENTICAL to `vehicle` USED IN DISTANCE MATRIX.**
      required:
        - shifts
        - vehicle_id
      properties:
        shifts:
          type: array
          items:
            $ref: '#/components/schemas/Shift'
          minItems: 1
          uniqueItems: true
          description: |
            Each entry describes the start and end location, shifts and breaks of the vehicle during the problem. A vehicle is allowed to be traveling and servicing orders only during some shift. Shifts cannot overlap for a given vehicle. Currently `start_location_id` and `end_location_id` are required, but we understand the need for "open" routes where either or both are not specified.
          example: [
            {
              "shift_id": "Tuesday_Polishing_Or_Painting",
              "shift_start": "2018-10-02T09:00:00-04:00",
              "shift_end": "2018-10-02T18:00:00-04:00",
              "start_location_id": "location-a",
              "end_location_id": "location-b"
            }
          ]
        vehicle_id:
          type: string
          format: byte
          description: String identifier of the vehicle
          example: 'truck-abc123'
        volume_capacity:
          type: number
          format: double
          description: Maximum volumetric capacity of the vehicle in cubic centimeters.
          example: 534422.1
        weight_capacity:
          type: number
          format: double
          description: Maximum weight capacity of the vehicle in kilograms
          example: 42331.2
        capacity_by_item:
          type: array
          items:
            $ref: '#/components/schemas/ItemQty'
          minItems: 1
          uniqueItems: true
          description: |
            Describes a set of (`item_type`, `quantity`) pairs that the vehicle can carry. Each key must be an `item_type` given in the `items` object. If this is not given, MARE assumes the vehicle has an infinite capacity on a per-item basis. Mixing different items is handled by `volume_capacity`, in cubic meters or `weight_capacity` in kg. By default, if this keyword is not given, MARE will not take into account any capacities by item.
        type:
          type: string
          format: byte
          description: The mode of transport.
          enum:
            - car
            - truck
            - bicycle
            - pedestrian
          example: truck
        hazmat:
          type: boolean
          description: True if this vehicle is subject to hazmat restrictions (**TRUCK ONLY**).
          enum:
            - true
            - false
          example: true
        height:
          type: number
          format: float
          description: Vehicle height in meters (**TRUCK ONLY**).
          example: 4.27
        length:
          type: number
          format: float
          description: Vehicle length in meters (**TRUCK ONLY**).
          example: 14.63
        width:
          type: number
          format: float
          description: Vehicle width in meters (**TRUCK ONLY**).
          example: 2.44
        weight:
          type: number
          format: float
          description: Vehicle weight in kilograms (**TRUCK ONLY**).
          example: 36287
        num_axles:
          type: integer
          format: int64
          description: |
            **NOT USED IN THIS CASE?**
            Describes vehicle properties in order to restrict routing to allowable roads (**TRUCK ONLY**).
          example: 5
        attributes:
          type: array
          items:
            type: string
            format: byte
          minItems: 1
          uniqueItems: true
          description: |
            List of arbitrary attributes associated with the a vehicle in the `vehicles` object to create an affinity between vehicles and orders. These strings must exactly match with the order `attribute` parameters and are enforced via the `match_attributes` constraint.
          example: ["does not like Jim",
                    "bucket truck",
                    "Tamil only"]
          
    # matrix job template
    MatrixJob:
      type: object
      description: |
        Complex object containing information about locations and a vehicle needed to build distance matrix.
      required:
          - locations
          - vehicle
      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
          minItems: 1
          maxItems: 7500
          uniqueItems: true
          example: [
            {
              "location_id": "example-a",
              "latitude": 33.937244,
              "longitude": -84.36947
            },
            {
              "location_id": "example-b",
              "latitude": 33.887576,
              "longitude": -84.261385
            },
            {
              "location_id": "example-c",
              "latitude": 33.896810,
              "longitude": -84.327653
            }]
        vehicle:
          $ref: '#/components/schemas/Vehicle'
        sources:
          type: array
          items:
            type: integer
            format: int64
          minItems: 1
          maxItems: 10
          uniqueItems: true
          description: |
            If the full n x n matrix is not desired, sources and destinations arrays can be used to provide the indices of the locations that are sources/destinations. All indices must be in {0,1,2,...,n-1} and only paths from a source to a destination will be provided. Note that both sources and destinations, should both be used or not at all.
          example: [0, 2]
        destinations:
          type: array
          items:
            type: integer
            format: int64
          minItems: 1
          maxItems: 10
          uniqueItems: true
          description: |
            If the full n x n matrix is not desired, `sources` and `destinations` arrays can be used to provide the indices of the locations that are desired source/destination pairs. All indices must be in {0,1,2,...,n-1} and only paths from a source to a destination will be provided. Note that both sources and destinations, should both be used or not at all.
          example: [1]
        force_containment:
          type: boolean
          description: |
            If provided along with `location_classes` for `sources` and `destinations`, then MARE only returns information for `source`-`destination` pairs where the `source` location classes completely contain the `destination` location classes.
          enum:
            - true
            - false
          example: false
        start_local_time:
          type: string
          format: byte
          description: |
            Start local time in 24-hour _hh:mm:ss_ format. Used in conjunction with `end_local_time` parameter.
          example: '09:00:00'
        end_local_time:
          type: string
          format: byte
          description: |
            End local time in 24-hour _hh:mm:ss_ format. Used in conjunction with `start_local_time` parameter.
          example: '17:00:00'
        num_neighbors:
          type: integer
          format: int64
          description: |
            If provided, the response will only contain information about paths from any location to its nearest `num_neighbors` destinations.
          example: 5
        max_travel_time:
          type: number
          format: double
          description: |
            Return only those travel times in seconds that are less than `max_travel_time` across all traffic windows.
          example: 3600
        radius:
          type: integer
          format: int64
          description: |
            MARE looks for the nearest street segment within `radius` meters of `latitude` and `longitude` within the `locations` object. Can be useful in rural and other areas where not all streets are included in the map data.
          default: 1500
          example: 3000
        weekend:
          type: boolean
          description: |
            If `true`, MARE defaults to the fastest available traffic window corresponding to weekend/free flow traffic patterns, otherwise MARE defaults to returning travel times for multiple traffic windows, depending on whether `start_local_time` and `end_local_time` are provided.
          enum:
            - true
            - false
          default: false
          example: False

    # vehicle routing template
    RoutingJob:
      type: object
      description: |
        Complex object containing information about locations, orders, vehicles, and constraints needed to build optimal routing solution.
      required:
        - locations
        - orders
        - vehicles
        - constraints
      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
          minItems: 1
          maxItems: 7500
          uniqueItems: true
          example: [
            {
              "location_id": "location-a",
              "latitude": 33.937244,
              "longitude": -84.36947
            },
            {
              "location_id": "location-b",
              "latitude": 33.887576,
              "longitude": -84.261385
            },
            {
              "location_id": "location-c",
              "latitude": 33.896810,
              "longitude": -84.327653
            }]
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
          minItems: 1
          maxItems: 7500
          uniqueItems: true
          example: [
            {
              "location_id": "loc1",
              "order_name": "Service Washington Monument",
              "order_id": "DC-1",
              "duration": 3600,
              "priority" : 3,
              "min_visits": 2
            },
            {
              "location_id": "loc2",
              "order_name": "Service Ford's Theatre",
              "order_id": "DC-2",
              "duration": 3600,
              "priority": 2,
              "min_visits": 2
            }
          ]
        vehicles:
          type: array
          items:
            $ref: '#/components/schemas/RoutingVehicle'
          minItems: 1
          maxItems: 7500
          uniqueItems: true
          example: 'abc'
        #constraints:
          #type: array
          #items:
            #$ref: '#/components/schemas/Constraint'
          # you are HERE!!!!
        
    ##############
    # deprecated #
    ##############
    Repair_Job_JSON:
      properties:
        new_order:
          type: string
        force_containment:
          type: boolean
      type: object

  # responses
  responses:
    ParseError:
      description: When a mask can't be parsed
    MaskError:
      description: When any error occurs on mask
  
  # parameters
  parameters:
    skipParam:
      name: skip
      in: query
      description: number of items to skip
      required: true
      schema:
        type: integer
        format: int32
    limitParam:
      name: limit
      in: query
      description: max records to return
      required: true
      schema:
        type: integer
        format: int32
  
  # examples
  requestBodies:
    Repair_Job_JSON:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Repair_Job_JSON'
      required: true
    Routing_Job_JSON:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RoutingJob'
      required: true
  
  #headers:
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
  
  # links to reusable response contents
  links:
    GetJobByJobId:
      description: |
        The `jobid` value returned in the response can be used as the the `jobid` parameter in other `GET` paths.
      operationId: post_routing_job_request
      parameters:
        jobId: $response.body#/jobid
  
  #callbacks:
  
# security
#security: